default namespace = "http://www.tei-c.org/ns/1.0"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ctrl = "http://nwalsh.com/xmlns/schema-control/"
namespace db = "http://docbook.org/docbook-ng"
namespace ns1 = "http://www.w3.org/1998/Math/MathML"
namespace ns2 = "http://www.w3.org/2000/svg"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

div {
  # include "teilib.rng"
  tei.lists |= db.qandaset
  div {
    div {
      # include "Schema/teikeywords.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-03-10T21:29:55Z
        # by relaxGen.xsl.
        
        # [DSTKEYS] 3.8.5: TEI Keywords
        
        # I.  Declare TEI keywords for data types.
        
        # These parameter entities are used as keywords to express
        # rules or constraints which cannot be fully expressed in attribute declarations; their
        # expansions show the nearest available equivalent.
        datatype.AnyURI = xsd:anyURI
        datatype.Boolean = xsd:boolean
        datatype.Certainty = text
        datatype.Code = text
        datatype.Date = xsd:date
        datatype.DateTime = xsd:dateTime
        datatype.Duration = xsd:duration
        datatype.Entities = xsd:ENTITIES
        datatype.Entity = xsd:ENTITY
        datatype.Extptr = text
        datatype.Float = xsd:decimal
        datatype.ID = xsd:ID
        datatype.IDref = xsd:IDREF
        datatype.IDrefs = xsd:IDREFS
        datatype.Key = text
        datatype.Language = text
        datatype.Name = xsd:NCName
        datatype.NonNegativeInteger = xsd:nonNegativeInteger
        datatype.NMtoken = xsd:NMTOKEN
        datatype.NMtokens = xsd:NMTOKENS
        datatype.Sex = "m" | "f" | "u" | "x"
        datatype.Text = text
        datatype.Time = xsd:time
        datatype.Token = text
        datatype.UBoolean = "true" | "false" | "unknown" | "unspecified"
        # II.  Declare keywords for tag-set selection.
        
        # Declare all bases and additional tag sets as IGNORE.  The
        # user can override this default by declaring the same entity with the
        # replacement text INCLUDE, in the document's DTD
        # subset.
        
        # Base tag sets first.
        TEI.prose = IGNORE
        TEI.verse = IGNORE
        TEI.drama = IGNORE
        TEI.spoken = IGNORE
        TEI.dictionaries = IGNORE
        TEI.terminology = IGNORE
        # Now the mixed bases.
        TEI.general = IGNORE
        TEI.mixed = IGNORE
        # Now additional tag sets.
        TEI.linking = IGNORE
        TEI.analysis = IGNORE
        TEI.fs = IGNORE
        TEI.certainty = IGNORE
        TEI.transcr = IGNORE
        TEI.textcrit = IGNORE
        TEI.names.dates = IGNORE
        TEI.tagdocs = IGNORE
        TEI.nets = IGNORE
        TEI.figures = IGNORE
        TEI.corpus = IGNORE
        # III. Declare TEI.XML and associated omissibility indicators
        TEI.XML = IGNORE
        #  end of [DSTKEYS]  3.8.5
        
      }
    }
    div {
      # include "Schema/teiclasses.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-03-10T21:29:55Z
        # by relaxGen.xsl.
        
        # [DSTECOV] 3.7.3: Element classes for TEI DTDs
        
        # First, we declare the 'low-level' core classes:
        # these are classes of semantically and structurally similar elements
        # declared as part of the core tag set, e.g. the classes 'data' or
        # 'edit'.
        
        # [DSTECLO] 3.7.4: Low-level classes
        
        # Most of these elements are in the core tag set, but
        # some may be from other tag sets.
        
        # Phrase-level classes
        tei.teiHeader |= notAllowed
        tei.teiText |= notAllowed
        tei.hqphrase |= notAllowed
        tei.phrase |= tei.hqphrase
        tei.date |= notAllowed
        tei.data |= notAllowed
        tei.phrase |= tei.data
        tei.edit |= notAllowed
        tei.phrase |= tei.edit
        tei.loc |= notAllowed
        tei.phrase |= tei.loc
        tei.seg |= notAllowed
        tei.phrase |= tei.seg
        tei.phrase.verse |= notAllowed
        tei.phrase |= tei.phrase.verse
        tei.formPointers |= notAllowed
        tei.phrase |= tei.formPointers
        tei.metadata |= notAllowed
        tei.Incl |= tei.metadata
        tei.refsys |= notAllowed
        tei.Incl |= tei.refsys
        tei.editIncl |= notAllowed
        tei.Incl |= tei.editIncl
        tei.Incl |= notAllowed
        tei.oddDecl |= notAllowed
        tei.chunk |= tei.oddDecl
        tei.oddRef |= notAllowed
        tei.chunk |= tei.oddRef
        tei.oddPhr |= notAllowed
        tei.phrase |= tei.oddPhr
        # Inter-level classes
        tei.hqinter |= notAllowed
        tei.inter |= tei.hqinter
        tei.common |= tei.hqinter
        tei.bibl |= notAllowed
        tei.inter |= tei.bibl
        tei.common |= tei.bibl
        tei.inter |= tei.lists
        tei.common |= tei.lists
        tei.notes |= notAllowed
        tei.inter |= tei.notes
        tei.common |= tei.notes
        tei.stageDirection |= notAllowed
        tei.comp.drama |= tei.stageDirection
        tei.inter |= tei.stageDirection
        #  end of [DSTECLO]  3.7.4
        
        # [DSTECMI] 3.7.9: Misc. Element Class Models
        tei.agent |= notAllowed
        tei.addrPart |= notAllowed
        tei.biblPart |= notAllowed
        tei.demographic |= notAllowed
        tei.divbot |= notAllowed
        tei.divtop |= notAllowed
        tei.dramafront |= notAllowed
        tei.front |= tei.dramafront
        tei.front |= notAllowed
        tei.personPart |= notAllowed
        tei.placePart |= notAllowed
        tei.tpParts |= notAllowed
        tei.fmchunk |= notAllowed
        #  end of [DSTECMI]  3.7.9
        
        # Next, we declare the 'high-level' classes: these group
        # together all phrase-level elements, all inter-level elements, and all
        # chunk-level elements in the core, and identify the 'common' component
        # elements (chunks and inter-level elements), as opposed to the
        # tagset-specific components.
        
        # [DSTECHI] 3.7.5: Common high-level classes
        
        # These
        # are the fundamental element classes.
        tei.phrase |= notAllowed
        tei.inter |= notAllowed
        tei.chunk |= notAllowed
        tei.common |= tei.chunk
        tei.segment |= notAllowed
        tei.paragraph |= notAllowed
        # This class isolates all the common component-level elements.
        tei.common |= notAllowed
        #  end of [DSTECHI]  3.7.5
        
        # Next, we embed the portions of each base and additional tag
        # set which declare relevant parameter entities. Only those files are
        # embedded which have been selected by the user in the DTD subset. These
        # files will declare parameter entities for their component-level
        # elements, as well as for any global attributes they define.
        
        # [DSTECMK] 3.7.6: Embedding tag-set-specific entity definitions
        
        #  end of [DSTECMK]  3.7.6
        
        # We can now declare the standard content models; one of these
        # varies with the base selected.
        
        # [DSTECST] 3.7.7: Standard Content Models
        
        # Here we declare the parameter entities phrase, macro.phraseSeq,
        # component, macro.componentSeq, macro.paraContent, and macro.specialPara, for use in the
        # content models of element declarations.  The entities phrase and
        # macro.phraseSeq are the same in all bases.  They may include elements
        # specific to single tag sets; if the tag set is not selected, these
        # elements are undefined and have no effect.
        macro.phrasegroup = text | tei.phrase | tei.Incl
        macro.phraseSeq = macro.phrasegroup*
        # The entity component varies with the base.  The
        # versions for the combined bases are declared first (so as to
        # take precedence over the declarations in the individual
        # bases).
        
        # [DSTECMX] 3.7.8: Definition of components for combined bases
        
        # Default declarations for the 'mix.' entities used for mixed
        # and general bases.
        gen.verse = tei.comp.verse | (tei.common | tei.comp.verse)*
        gen.drama = tei.comp.drama | (tei.common | tei.comp.drama)*
        gen.spoken = tei.comp.spoken | (tei.common | tei.comp.spoken)*
        gen.dictionaries =
          tei.comp.dictionaries | (tei.common | tei.comp.dictionaries)*
        gen.terminology =
          tei.comp.terminology | (tei.common | tei.comp.terminology)*
        macro.componentPlus |=
          tei.common+
          | (gen.verse,
             gen.drama,
             gen.spoken,
             gen.dictionaries,
             gen.terminology)?
        #  end of [DSTECMX]  3.7.8
        macro.component |= tei.common
        # Default declaration.
        
        # The entity macro.componentSeq is always a starred sequence of
        # component elements.  Its definition does not vary with the base (unless
        # we are using the general base, in which case it has already been defined
        # above), but the meaning of the definition does.
        macro.componentSeq |= (macro.component, tei.Incl*)*
        # The following entities do not vary with the base.
        macro.paraContent = (text | tei.phrase | tei.inter | tei.Incl)*
        macro.specialPara =
          (text | tei.phrase | tei.inter | tei.chunk | tei.Incl)*
        #  end of [DSTECST]  3.7.7
        
        # Finally, we declare the attribute classes, including
        # the global attributes.
        
        # [DSTECAT] 3.7.1: Attribute classes
        tei.declaring.attributes |= attribute decls { datatype.IDrefs }?
        tei.declarable.attributes |=
          [ a:defaultValue = "false" ]
          attribute default { datatype.Boolean }?
        tei.typed.attributes |=
          attribute type { datatype.Text }?,
          attribute subtype { datatype.Text }?
        tei.interpret.attributes |=
          attribute resp { datatype.Text }?,
          attribute type { datatype.Text }?,
          attribute inst { datatype.IDrefs }?
        tei.divn.attributes |=
          tei.metrical.attributes,
          attribute type { tei.divn.attributes.type.values }?,
          [ a:defaultValue = "uniform" ]
          attribute org { "composite" | "uniform" }?,
          [ a:defaultValue = "complete" ]
          attribute sample {
            "initial" | "medial" | "final" | "unknown" | "complete"
          }?,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?
        tei.divn.attributes.type.values |= text
        tei.names.attributes |=
          attribute key { datatype.Text }?,
          attribute reg { datatype.Text }?
        tei.seg.attributes |=
          tei.metrical.attributes,
          attribute type { datatype.Key }?,
          attribute function { datatype.Text }?,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?
        tei.timed.attributes |=
          attribute start { datatype.IDref }?,
          attribute end { datatype.IDref }?,
          attribute dur { datatype.Text }?
        tei.xPointer.attributes |=
          tei.pointer.attributes,
          attribute doc { datatype.Entity }?,
          attribute url { datatype.AnyURI }?,
          [ a:defaultValue = "ROOT" ]
          attribute from { datatype.Extptr }?,
          [ a:defaultValue = "DITTO" ] attribute to { datatype.Extptr }?
        #  end of [DSTECAT]  3.7.1
        
        # [DSTGA] 3.5: Global attributes
        
        # The global attributes are defined for every element in the TEI
        # tag set; individual declarations may be overridden by local declarations
        # for individual elements.
        
        # If the tag sets invoked by the user define extra global
        # attributes (they do this in their .ent file), then they are inherited by
        # GLOBAL; otherwise the parameter entities referred to expand to the empty
        # string, as shown here.
        tei.global.attributes |=
          tei.linking.attributes,
          tei.analysis.attributes,
          attribute id { datatype.ID }?,
          attribute n { datatype.Text }?,
          attribute lang { datatype.IDref }?,
          attribute rend { tei.global.attributes.rend.values }?
        tei.global.attributes.rend.values |= text
        # The TEIform attribute is also global, but is declared
        # individually for each element, not in a parameter entity
        # declaration.
        
        #  end of [DSTGA]  3.5
        
        #  end of [DSTECOV]  3.7.3
        
      }
    }
    div {
      # include "Schema/header.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-03-10T21:29:53Z
        # by relaxGen.xsl.
        
        # [D221] 5.1.1: The TEI Header
        
        # header.dtd  Tags for TEI Header.
        tei.header |= notAllowed
        teiHeader = element teiHeader { teiHeader.content }
        teiHeader.content =
          teiHeader.attributes, (fileDesc, tei.header*, revisionDesc?)
        teiHeader.attributes =
          tei.global.attributes,
          [ a:defaultValue = "text" ] attribute type { datatype.Text }?,
          attribute creator { datatype.Text }?,
          [ a:defaultValue = "new" ]
          attribute status { "new" | "update" }?,
          attribute date.created { datatype.Date }?,
          attribute date.updated { datatype.Date }?,
          [ a:defaultValue = "teiHeader" ] attribute TEIform { text }?
        tei.teiHeader |= teiHeader
        # [D221B] 5.1.1
        
        # [D222] 5.2: The file description
        fileDesc = element fileDesc { fileDesc.content }
        fileDesc.content =
          fileDesc.attributes,
          (titleStmt,
           editionStmt?,
           extent?,
           publicationStmt,
           seriesStmt?,
           notesStmt?,
           sourceDesc+)
        fileDesc.attributes =
          tei.global.attributes,
          [ a:defaultValue = "fileDesc" ] attribute TEIform { text }?
        # [D2221] 5.2.1: The title statement
        titleStmt = element titleStmt { titleStmt.content }
        titleStmt.content =
          titleStmt.attributes,
          (title+,
           (author | editor | sponsor | funder | principal | respStmt)*)
        titleStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "titleStmt" ] attribute TEIform { text }?
        sponsor = element sponsor { sponsor.content }
        sponsor.content = sponsor.attributes, macro.phraseSeq
        sponsor.attributes =
          tei.global.attributes,
          [ a:defaultValue = "sponsor" ] attribute TEIform { text }?
        funder = element funder { funder.content }
        funder.content = funder.attributes, macro.phraseSeq
        funder.attributes =
          tei.global.attributes,
          [ a:defaultValue = "funder" ] attribute TEIform { text }?
        principal = element principal { principal.content }
        principal.content = principal.attributes, macro.phraseSeq
        principal.attributes =
          tei.global.attributes,
          [ a:defaultValue = "principal" ] attribute TEIform { text }?
        # The TITLE, AUTHOR, NAME, RESPSTMT, and RESP elements are
        # declared in file teicore2.dtd, not here.
        
        #  end of [D2221]  5.2.1
        
        # [D2222] 5.2.2: The edition statement
        editionStmt = element editionStmt { editionStmt.content }
        editionStmt.content =
          editionStmt.attributes,
          ((edition, respStmt*) | p+)
        editionStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "editionStmt" ] attribute TEIform { text }?
        edition = element edition { edition.content }
        edition.content = edition.attributes, macro.phraseSeq
        edition.attributes =
          tei.global.attributes,
          [ a:defaultValue = "edition" ] attribute TEIform { text }?
        tei.biblPart |= edition
        #  end of [D2222]  5.2.2
        
        # [D2223] 5.2.3: The extent statement
        extent = element extent { extent.content }
        extent.content = extent.attributes, macro.phraseSeq
        extent.attributes =
          tei.global.attributes,
          [ a:defaultValue = "extent" ] attribute TEIform { text }?
        tei.biblPart |= extent
        #  end of [D2223]  5.2.3
        
        # [D2224] 5.2.4: The publication statement
        publicationStmt =
          element publicationStmt { publicationStmt.content }
        publicationStmt.content =
          publicationStmt.attributes,
          ((p, tei.Incl*)+
           | ((publisher
               | distributor
               | authority
               | pubPlace
               | address
               | idno
               | availability
               | date),
              tei.Incl*)+)
        publicationStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "publicationStmt" ]
          attribute TEIform { text }?
        distributor = element distributor { distributor.content }
        distributor.content = distributor.attributes, macro.phraseSeq
        distributor.attributes =
          tei.global.attributes,
          [ a:defaultValue = "distributor" ] attribute TEIform { text }?
        authority = element authority { authority.content }
        authority.content = authority.attributes, macro.phraseSeq
        authority.attributes =
          tei.global.attributes,
          [ a:defaultValue = "authority" ] attribute TEIform { text }?
        idno = element idno { idno.content }
        idno.content = idno.attributes, text
        idno.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "idno" ] attribute TEIform { text }?
        tei.biblPart |= idno
        availability = element availability { availability.content }
        availability.content = availability.attributes, tei.paragraph+
        availability.attributes =
          tei.global.attributes,
          [ a:defaultValue = "unknown" ]
          attribute status { "free" | "unknown" | "restricted" }?,
          [ a:defaultValue = "availability" ]
          attribute TEIform { text }?
        # The PUBLISHER, PUBPLACE, and ADDRESS elements
        # are defined in file teicore2.dtd.
        
        #  end of [D2224]  5.2.4
        
        # [D2225] 5.2.5: The series statement
        seriesStmt = element seriesStmt { seriesStmt.content }
        seriesStmt.content =
          seriesStmt.attributes,
          ((title+, (idno | respStmt)*)
           | p+)
        seriesStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "seriesStmt" ] attribute TEIform { text }?
        #  end of [D2225]  5.2.5
        
        # [D2226] 5.2.6: The notes statement
        notesStmt = element notesStmt { notesStmt.content }
        notesStmt.content = notesStmt.attributes, note+
        notesStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "notesStmt" ] attribute TEIform { text }?
        # The NOTE element is defined with the core tags.
        
        #  end of [D2226]  5.2.6
        
        #  end of [D222]  5.2
        
        # [D223] 5.2.7: The source description
        sourceDesc = element sourceDesc { sourceDesc.content }
        sourceDesc.content =
          sourceDesc.attributes,
          (p
           | bibl
           | biblFull
           | biblStruct
           | listBibl
           | scriptStmt
           | recordingStmt)+
        sourceDesc.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "sourceDesc" ] attribute TEIform { text }?
        # [D2231] 5.2.9: Script statement and recording statement
        scriptStmt = element scriptStmt { scriptStmt.content }
        scriptStmt.content =
          scriptStmt.attributes, (p+ | bibl | biblFull | biblStruct)
        scriptStmt.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "scriptStmt" ] attribute TEIform { text }?
        recordingStmt = element recordingStmt { recordingStmt.content }
        recordingStmt.content =
          recordingStmt.attributes, (p+ | recording+)
        recordingStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "recordingStmt" ]
          attribute TEIform { text }?
        recording = element recording { recording.content }
        recording.content =
          recording.attributes,
          (p+ | (respStmt | equipment | broadcast | date)*)
        recording.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "audio" ]
          attribute type { "audio" | "video" }?,
          attribute dur { datatype.Duration }?,
          [ a:defaultValue = "recording" ] attribute TEIform { text }?
        equipment = element equipment { equipment.content }
        equipment.content = equipment.attributes, tei.paragraph+
        equipment.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "equipment" ] attribute TEIform { text }?
        broadcast = element broadcast { broadcast.content }
        broadcast.content =
          broadcast.attributes,
          (p+ | bibl | biblStruct | biblFull | recording)
        broadcast.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "broadcast" ] attribute TEIform { text }?
        #  end of [D2231]  5.2.9
        
        #  end of [D223]  5.2.7
        
        # [D225] 5.3: The encoding description
        tei.encoding |= notAllowed
        encodingDesc = element encodingDesc { encodingDesc.content }
        encodingDesc.content =
          encodingDesc.attributes, (tei.encoding*, p*)
        encodingDesc.attributes =
          tei.global.attributes,
          [ a:defaultValue = "encodingDesc" ]
          attribute TEIform { text }?
        tei.header |= encodingDesc
        # [D2251] 5.3.1: The project description
        projectDesc = element projectDesc { projectDesc.content }
        projectDesc.content = projectDesc.attributes, tei.paragraph+
        projectDesc.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "projectDesc" ] attribute TEIform { text }?
        tei.encoding |= projectDesc
        #  end of [D2251]  5.3.1
        
        # [D2252] 5.3.2: The sampling declaration
        samplingDecl = element samplingDecl { samplingDecl.content }
        samplingDecl.content = samplingDecl.attributes, tei.paragraph+
        samplingDecl.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "samplingDecl" ]
          attribute TEIform { text }?
        tei.encoding |= samplingDecl
        #  end of [D2252]  5.3.2
        
        # [D2253] 5.3.3: The editorial practices declaration
        editorialDecl = element editorialDecl { editorialDecl.content }
        editorialDecl.content =
          editorialDecl.attributes,
          (p+
           | ((correction
               | normalization
               | quotation
               | hyphenation
               | interpretation
               | segmentation
               | stdVals)+,
              p*))
        editorialDecl.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "editorialDecl" ]
          attribute TEIform { text }?
        tei.encoding |= editorialDecl
        correction = element correction { correction.content }
        correction.content = correction.attributes, tei.paragraph+
        correction.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "unknown" ]
          attribute status { "high" | "medium" | "low" | "unknown" }?,
          [ a:defaultValue = "silent" ]
          attribute method { "silent" | "tags" }?,
          [ a:defaultValue = "correction" ] attribute TEIform { text }?
        normalization = element normalization { normalization.content }
        normalization.content = normalization.attributes, tei.paragraph+
        normalization.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          attribute source { datatype.Text }?,
          [ a:defaultValue = "silent" ]
          attribute method { "silent" | "tags" }?,
          [ a:defaultValue = "normalization" ]
          attribute TEIform { text }?
        quotation = element quotation { quotation.content }
        quotation.content = quotation.attributes, tei.paragraph+
        quotation.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "all" ]
          attribute marks { "none" | "some" | "all" }?,
          [ a:defaultValue = "unknown" ]
          attribute form {
            "data" | "rend" | "std" | "nonstd" | "unknown"
          }?,
          [ a:defaultValue = "quotation" ] attribute TEIform { text }?
        hyphenation = element hyphenation { hyphenation.content }
        hyphenation.content = hyphenation.attributes, tei.paragraph+
        hyphenation.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "some" ]
          attribute eol { "all" | "some" | "hard" | "none" }?,
          [ a:defaultValue = "hyphenation" ] attribute TEIform { text }?
        segmentation = element segmentation { segmentation.content }
        segmentation.content = segmentation.attributes, tei.paragraph+
        segmentation.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "segmentation" ]
          attribute TEIform { text }?
        stdVals = element stdVals { stdVals.content }
        stdVals.content = stdVals.attributes, tei.paragraph+
        stdVals.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "stdVals" ] attribute TEIform { text }?
        interpretation =
          element interpretation { interpretation.content }
        interpretation.content =
          interpretation.attributes, tei.paragraph+
        interpretation.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "interpretation" ]
          attribute TEIform { text }?
        #  end of [D2253]  5.3.3
        
        # [DHD57] 5.3.4: Tag usage and rendition declarations
        tagsDecl = element tagsDecl { tagsDecl.content }
        tagsDecl.content = tagsDecl.attributes, (rendition*, tagUsage*)
        tagsDecl.attributes =
          tei.global.attributes,
          [ a:defaultValue = "tagsDecl" ] attribute TEIform { text }?
        tei.encoding |= tagsDecl
        tagUsage = element tagUsage { tagUsage.content }
        tagUsage.content = tagUsage.attributes, macro.paraContent
        tagUsage.attributes =
          tei.global.attributes,
          attribute gi { datatype.Text },
          attribute occurs { datatype.NonNegativeInteger }?,
          attribute ident { datatype.NonNegativeInteger }?,
          attribute render { datatype.IDref }?,
          [ a:defaultValue = "tagUsage" ] attribute TEIform { text }?
        rendition = element rendition { rendition.content }
        rendition.content = rendition.attributes, macro.paraContent
        rendition.attributes =
          tei.global.attributes,
          [ a:defaultValue = "rendition" ] attribute TEIform { text }?
        #  end of [DHD57]  5.3.4
        
        # [D2254] 5.3.5.3: The reference scheme declaration
        refsDecl = element refsDecl { refsDecl.content }
        refsDecl.content = refsDecl.attributes, (p+ | step+ | state+)
        refsDecl.attributes =
          tei.global.attributes,
          [ a:defaultValue = "TEI" ]
          attribute doctype { datatype.Text }?,
          [ a:defaultValue = "refsDecl" ] attribute TEIform { text }?
        tei.encoding |= refsDecl
        step = element step { step.content }
        step.content = step.attributes, empty
        step.attributes =
          tei.global.attributes,
          attribute refunit { datatype.Text }?,
          attribute length { datatype.NonNegativeInteger }?,
          attribute delim { datatype.Text }?,
          attribute from { datatype.Extptr },
          [ a:defaultValue = "DITTO" ] attribute to { datatype.Extptr },
          [ a:defaultValue = "step" ] attribute TEIform { text }?
        state = element state { state.content }
        state.content = state.attributes, empty
        state.attributes =
          tei.global.attributes,
          attribute ed { datatype.Text }?,
          attribute unit { datatype.Text },
          attribute length { datatype.NonNegativeInteger }?,
          attribute delim { datatype.Text }?,
          [ a:defaultValue = "state" ] attribute TEIform { text }?
        #  end of [D2254]  5.3.5.3
        
        # [D2255] 5.3.6: The classification declaration
        tei.categorize |= notAllowed
        classDecl = element classDecl { classDecl.content }
        classDecl.content = classDecl.attributes, taxonomy+
        classDecl.attributes =
          tei.global.attributes,
          [ a:defaultValue = "classDecl" ] attribute TEIform { text }?
        tei.encoding |= classDecl
        taxonomy = element taxonomy { taxonomy.content }
        taxonomy.content =
          taxonomy.attributes,
          (category+
           | ((bibl | biblStruct | biblFull), category*))
        taxonomy.attributes =
          tei.global.attributes,
          [ a:defaultValue = "taxonomy" ] attribute TEIform { text }?
        category = element category { category.content }
        category.content = category.attributes, (catDesc, category*)
        category.attributes =
          tei.global.attributes,
          [ a:defaultValue = "category" ] attribute TEIform { text }?
        catDesc = element catDesc { catDesc.content }
        catDesc.content =
          catDesc.attributes, (text | tei.phrase | tei.categorize)*
        catDesc.attributes =
          tei.global.attributes,
          [ a:defaultValue = "catDesc" ] attribute TEIform { text }?
        #  end of [D2255]  5.3.6
        
        # [D2256] 5.3.7: The FSD declaration
        fsdDecl = element fsdDecl { fsdDecl.content }
        fsdDecl.content = fsdDecl.attributes, empty
        fsdDecl.attributes =
          tei.global.attributes,
          attribute type { datatype.Text },
          attribute fsd { datatype.Entity },
          [ a:defaultValue = "fsdDecl" ] attribute TEIform { text }?
        tei.encoding |= fsdDecl
        #  end of [D2256]  5.3.7
        
        # [D2258] 5.3.8: Metrical Notation Declaration
        metDecl = element metDecl { metDecl.content }
        metDecl.content =
          metDecl.attributes, (macro.componentSeq | symbol+)
        metDecl.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "met real" ]
          attribute type { datatype.Text }?,
          attribute pattern { datatype.Text }?,
          [ a:defaultValue = "metDecl" ] attribute TEIform { text }?
        tei.encoding |= metDecl
        symbol = element symbol { symbol.content }
        symbol.content = symbol.attributes, macro.phraseSeq
        symbol.attributes =
          tei.global.attributes,
          attribute value { datatype.Text },
          [ a:defaultValue = "true" ]
          attribute terminal { datatype.Boolean }?,
          [ a:defaultValue = "symbol" ] attribute TEIform { text }?
        #  end of [D2258]  5.3.8
        
        # [DHDVAR] 5.3.9: Variant-Encoding Declaration
        variantEncoding =
          element variantEncoding { variantEncoding.content }
        variantEncoding.content = variantEncoding.attributes, empty
        variantEncoding.attributes =
          tei.global.attributes,
          attribute method {
            "location-referenced"
            | "double-end-point"
            | "parallel-segmentation"
          },
          attribute location { "internal" | "external" },
          [ a:defaultValue = "variantEncoding" ]
          attribute TEIform { text }?
        tei.encoding |= variantEncoding
        #  end of [DHDVAR]  5.3.9
        
        #  end of [D225]  5.3
        
        # [D224] 5.4: The profile description
        tei.profile |= notAllowed
        profileDesc = element profileDesc { profileDesc.content }
        profileDesc.content =
          profileDesc.attributes, (creation?, tei.profile*)
        profileDesc.attributes =
          tei.global.attributes,
          [ a:defaultValue = "profileDesc" ] attribute TEIform { text }?
        tei.header |= profileDesc
        # [D224C] 5.4.1: Creation
        creation = element creation { creation.content }
        creation.content = creation.attributes, macro.phraseSeq
        creation.attributes =
          tei.global.attributes,
          [ a:defaultValue = "creation" ] attribute TEIform { text }?
        #  end of [D224C]  5.4.1
        
        # [D2241] 5.4.2: Language usage
        langUsage = element langUsage { langUsage.content }
        langUsage.content = langUsage.attributes, (p | language)+
        langUsage.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "langUsage" ] attribute TEIform { text }?
        tei.profile |= langUsage
        language = element language { language.content }
        language.content = language.attributes, macro.phraseSeq
        language.attributes =
          tei.global.attributes,
          attribute wsd { datatype.Entity }?,
          attribute usage { datatype.NonNegativeInteger }?,
          [ a:defaultValue = "language" ] attribute TEIform { text }?
        #  end of [D2241]  5.4.2
        
        # [D2243] 5.4.3: Text Classification
        textClass = element textClass { textClass.content }
        textClass.content =
          textClass.attributes, (classCode | catRef | keywords)*
        textClass.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "textClass" ] attribute TEIform { text }?
        tei.profile |= textClass
        keywords = element keywords { keywords.content }
        keywords.content = keywords.attributes, (term+ | \list)
        keywords.attributes =
          tei.global.attributes,
          attribute scheme { datatype.IDref },
          [ a:defaultValue = "keywords" ] attribute TEIform { text }?
        classCode = element classCode { classCode.content }
        classCode.content = classCode.attributes, macro.phraseSeq
        classCode.attributes =
          tei.global.attributes,
          attribute scheme { datatype.IDref },
          [ a:defaultValue = "classCode" ] attribute TEIform { text }?
        catRef = element catRef { catRef.content }
        catRef.content = catRef.attributes, empty
        catRef.attributes =
          tei.global.attributes,
          attribute target { datatype.IDrefs },
          attribute scheme { datatype.IDref }?,
          [ a:defaultValue = "catRef" ] attribute TEIform { text }?
        #  end of [D2243]  5.4.3
        
        #  end of [D224]  5.4
        
        # [D226] 5.5: The Revision Description
        revisionDesc = element revisionDesc { revisionDesc.content }
        revisionDesc.content =
          revisionDesc.attributes, (\list | change+)
        revisionDesc.attributes =
          tei.global.attributes,
          [ a:defaultValue = "revisionDesc" ]
          attribute TEIform { text }?
        change = element change { change.content }
        change.content = change.attributes, (date, respStmt+, item)
        change.attributes =
          tei.global.attributes,
          [ a:defaultValue = "change" ] attribute TEIform { text }?
        # respStmt, item, and date are declared in teicore2.
        
        #  end of [D226]  5.5
        
        #  end of [D221B]  5.1.1
        
        #  end of [D221]  5.1.1
        
      }
    }
    div {
      # include "Schema/general.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-03-10T21:29:53Z
        # by relaxGen.xsl.
        
        # [DSTCBGN] 3.4: General-Base Tag Set
        div {
          # include "structure.rng"
          div {
            # Text Encoding Initiative Consortium:
            # Guidelines for Electronic Text Encoding and Interchange.
            # TEI P5 (unofficial)
            # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
            # is granted, provided this notice is included in all copies.
            # These materials may not be altered; modifications to these schemata should
            # be performed only as specified by the Guidelines, for example in the
            # chapter entitled 'Modifying the TEI DTD'
            # These materials are subject to revision by the TEI Consortium. Current versions
            # are available from the Consortium website at http://www.tei-c.org
            # TEI P5 Relax NG Schema generated 
            # 2004-03-10T21:29:54Z
            # by relaxGen.xsl.
            
            # [DDS] 22.7: Default text structure
            
            # This definition of the basic text structure is used by most
            # TEI base tag sets; some bases, however, use slight variations
            # upon it.
            
            # [DDSTEXT] 22.: Top-level parts of default structure
            \text = element text { text.content }
            text.content =
              text.attributes,
              (tei.Incl*,
               (front, tei.Incl*)?,
               (body | group),
               tei.Incl*,
               (back, tei.Incl*)?)
            text.attributes =
              tei.global.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "text" ] attribute TEIform { text }?
            tei.inter |= \text
            tei.teiText |= \text
            body = element body { body.content }
            body.content =
              body.attributes,
              ((tei.divtop | tei.Incl)*,
               (((macro.component, tei.Incl*)+,
                 ((divGen, tei.Incl*)*,
                  ((\div, (\div | divGen | tei.Incl)*)
                   | (div0, (div0 | divGen | tei.Incl)*)
                   | (div1, (div1 | divGen | tei.Incl)*))?))
                | ((divGen, tei.Incl*)*,
                   ((\div, (\div | divGen | tei.Incl)*)
                    | (div0, (div0 | divGen | tei.Incl)*)
                    | (div1, (div1 | divGen | tei.Incl)*)))),
               (tei.divbot, tei.Incl*)*)
            body.attributes =
              tei.global.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "body" ] attribute TEIform { text }?
            group = element group { group.content }
            group.content =
              group.attributes,
              ((tei.divtop | tei.Incl)*,
               ((\text | group), (\text | group | tei.Incl)*),
               (tei.divbot, tei.Incl*)*)
            group.attributes =
              tei.global.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "group" ] attribute TEIform { text }?
            #  end of [DDSTEXT]  22.
            
            # [DDSDIV] 22.1.1: Un-numbered divisions
            \div = element div { div.content }
            div.content =
              div.attributes,
              ((tei.divtop | tei.Incl)*,
               (((\div | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((\div | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div" ] attribute TEIform { text }?
            #  end of [DDSDIV]  22.1.1
            
            # [DDSDIVN] 22.1.2: Numbered divisions
            div0 = element div0 { div0.content }
            div0.content =
              div0.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div1 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div1 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div0.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div0" ] attribute TEIform { text }?
            div1 = element div1 { div1.content }
            div1.content =
              div1.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div2 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div2 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div1.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div1" ] attribute TEIform { text }?
            div2 = element div2 { div2.content }
            div2.content =
              div2.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div3 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div3 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div2.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div2" ] attribute TEIform { text }?
            div3 = element div3 { div3.content }
            div3.content =
              div3.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div4 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div4 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div3.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div3" ] attribute TEIform { text }?
            div4 = element div4 { div4.content }
            div4.content =
              div4.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div5 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div5 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div4.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div4" ] attribute TEIform { text }?
            div5 = element div5 { div5.content }
            div5.content =
              div5.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div6 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div6 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div5.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div5" ] attribute TEIform { text }?
            div6 = element div6 { div6.content }
            div6.content =
              div6.attributes,
              ((tei.divtop | tei.Incl)*,
               (((div7 | divGen), tei.Incl*)+
                | ((macro.component, tei.Incl*)+,
                   ((div7 | divGen), tei.Incl*)*)),
               (tei.divbot, tei.Incl*)*)
            div6.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div6" ] attribute TEIform { text }?
            div7 = element div7 { div7.content }
            div7.content =
              div7.attributes,
              ((tei.divtop | tei.Incl)*,
               (macro.component, tei.Incl*)+,
               (tei.divbot, tei.Incl*)*)
            div7.attributes =
              tei.global.attributes,
              tei.divn.attributes,
              tei.declaring.attributes,
              [ a:defaultValue = "div7" ] attribute TEIform { text }?
            #  end of [DDSDIVN]  22.1.2
            
            # [DDSDIVX] 22.2.4: Tags for start and end of divisions
            trailer = element trailer { trailer.content }
            trailer.content = trailer.attributes, macro.phraseSeq
            trailer.attributes =
              tei.global.attributes,
              [ a:defaultValue = "trailer" ] attribute TEIform { text }?
            tei.divbot |= trailer
            byline = element byline { byline.content }
            byline.content =
              byline.attributes,
              (text | tei.phrase | docAuthor | tei.Incl)*
            byline.attributes =
              tei.global.attributes,
              [ a:defaultValue = "byline" ] attribute TEIform { text }?
            tei.divtop |= byline
            tei.divbot |= byline
            tei.tpParts |= byline
            tei.fmchunk |= byline
            dateline = element dateline { dateline.content }
            dateline.content =
              dateline.attributes,
              (text | date | time | name | address | tei.Incl)*
            dateline.attributes =
              tei.global.attributes,
              [ a:defaultValue = "dateline" ]
              attribute TEIform { text }?
            tei.divtop |= dateline
            tei.divbot |= dateline
            argument = element argument { argument.content }
            argument.content =
              argument.attributes,
              (tei.Incl*, (head?, macro.componentSeq))
            argument.attributes =
              tei.global.attributes,
              [ a:defaultValue = "argument" ]
              attribute TEIform { text }?
            tei.divtop |= argument
            tei.fmchunk |= argument
            epigraph = element epigraph { epigraph.content }
            epigraph.content = epigraph.attributes, macro.componentSeq
            epigraph.attributes =
              tei.global.attributes,
              [ a:defaultValue = "epigraph" ]
              attribute TEIform { text }?
            tei.divtop |= epigraph
            tei.tpParts |= epigraph
            tei.divbot |= epigraph
            tei.fmchunk |= epigraph
            opener = element opener { opener.content }
            opener.content =
              opener.attributes,
              (text
               | tei.phrase
               | argument
               | byline
               | dateline
               | epigraph
               | salute
               | signed
               | tei.Incl)*
            opener.attributes =
              tei.global.attributes,
              [ a:defaultValue = "opener" ] attribute TEIform { text }?
            tei.divtop |= opener
            closer = element closer { closer.content }
            closer.content =
              closer.attributes,
              (text
               | signed
               | dateline
               | salute
               | tei.phrase
               | tei.Incl)*
            closer.attributes =
              tei.global.attributes,
              [ a:defaultValue = "closer" ] attribute TEIform { text }?
            tei.divbot |= closer
            salute = element salute { salute.content }
            salute.content = salute.attributes, macro.phraseSeq
            salute.attributes =
              tei.global.attributes,
              [ a:defaultValue = "salute" ] attribute TEIform { text }?
            tei.divtop |= salute
            tei.divbot |= salute
            signed = element signed { signed.content }
            signed.content = signed.attributes, macro.phraseSeq
            signed.attributes =
              tei.global.attributes,
              [ a:defaultValue = "signed" ] attribute TEIform { text }?
            tei.divtop |= signed
            tei.divbot |= signed
            # The HEAD element is declared in the core tag set.
            
            #  end of [DDSDIVX]  22.2.4
            
            # Front matter is defined in TEI.front file.
            div {
              # include "frontmatter.rng"
              div {
                # Text Encoding Initiative Consortium:
                # Guidelines for Electronic Text Encoding and Interchange.
                # TEI P5 (unofficial)
                # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
                # is granted, provided this notice is included in all copies.
                # These materials may not be altered; modifications to these schemata should
                # be performed only as specified by the Guidelines, for example in the
                # chapter entitled 'Modifying the TEI DTD'
                # These materials are subject to revision by the TEI Consortium. Current versions
                # are available from the Consortium website at http://www.tei-c.org
                # TEI P5 Relax NG Schema generated 
                # 2004-03-10T21:29:53Z
                # by relaxGen.xsl.
                
                # [DDSFRONT] 22.5: Additional Tag Set for Front Matter
                front = element front { front.content }
                front.content =
                  front.attributes,
                  ((tei.front | tei.Incl)*,
                   ((tei.fmchunk, (tei.fmchunk | titlePage | tei.Incl)*)
                    | (\div, (\div | tei.front | tei.Incl)*)
                    | (div1, (div1 | tei.front | tei.Incl)*))?)
                front.attributes =
                  tei.global.attributes,
                  tei.declaring.attributes,
                  [ a:defaultValue = "front" ]
                  attribute TEIform { text }?
                # [DDSTPAGE] 22.5: Tags for title pages
                titlePage = element titlePage { titlePage.content }
                titlePage.content =
                  titlePage.attributes,
                  (tei.Incl*, tei.tpParts, (tei.tpParts | tei.Incl)*)
                titlePage.attributes =
                  tei.global.attributes,
                  attribute type { datatype.Text }?,
                  [ a:defaultValue = "titlePage" ]
                  attribute TEIform { text }?
                tei.front |= titlePage
                docTitle = element docTitle { docTitle.content }
                docTitle.content =
                  docTitle.attributes,
                  (tei.Incl*, (titlePart, tei.Incl*)+)
                docTitle.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "docTitle" ]
                  attribute TEIform { text }?
                tei.tpParts |= docTitle
                tei.fmchunk |= docTitle
                titlePart = element titlePart { titlePart.content }
                titlePart.content =
                  titlePart.attributes, macro.paraContent
                titlePart.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "main" ]
                  attribute type { datatype.Text }?,
                  [ a:defaultValue = "titlePart" ]
                  attribute TEIform { text }?
                tei.tpParts |= titlePart
                tei.fmchunk |= titlePart
                docAuthor = element docAuthor { docAuthor.content }
                docAuthor.content =
                  docAuthor.attributes, macro.phraseSeq
                docAuthor.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "docAuthor" ]
                  attribute TEIform { text }?
                tei.tpParts |= docAuthor
                tei.divtop |= docAuthor
                tei.fmchunk |= docAuthor
                imprimatur = element imprimatur { imprimatur.content }
                imprimatur.content =
                  imprimatur.attributes, macro.paraContent
                imprimatur.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "imprimatur" ]
                  attribute TEIform { text }?
                tei.tpParts |= imprimatur
                docEdition = element docEdition { docEdition.content }
                docEdition.content =
                  docEdition.attributes, macro.paraContent
                docEdition.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "docEdition" ]
                  attribute TEIform { text }?
                tei.tpParts |= docEdition
                tei.fmchunk |= docEdition
                docImprint = element docImprint { docImprint.content }
                docImprint.content =
                  docImprint.attributes,
                  (text
                   | tei.phrase
                   | pubPlace
                   | docDate
                   | publisher
                   | tei.Incl)*
                docImprint.attributes =
                  tei.global.attributes,
                  [ a:defaultValue = "docImprint" ]
                  attribute TEIform { text }?
                tei.tpParts |= docImprint
                tei.fmchunk |= docImprint
                docDate = element docDate { docDate.content }
                docDate.content = docDate.attributes, macro.phraseSeq
                docDate.attributes =
                  tei.global.attributes,
                  attribute value { datatype.Date }?,
                  [ a:defaultValue = "docDate" ]
                  attribute TEIform { text }?
                tei.tpParts |= docDate
                tei.divtop |= docDate
                tei.fmchunk |= docDate
                #  end of [DDSTPAGE]  22.5
                
                #  end of [DDSFRONT]  22.5
                
              }
            }
            # Back matter is defined in TEI.back file.
            div {
              # include "backmatter.rng"
              div {
                # Text Encoding Initiative Consortium:
                # Guidelines for Electronic Text Encoding and Interchange.
                # TEI P5 (unofficial)
                # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
                # is granted, provided this notice is included in all copies.
                # These materials may not be altered; modifications to these schemata should
                # be performed only as specified by the Guidelines, for example in the
                # chapter entitled 'Modifying the TEI DTD'
                # These materials are subject to revision by the TEI Consortium. Current versions
                # are available from the Consortium website at http://www.tei-c.org
                # TEI P5 Relax NG Schema generated 
                # 2004-03-10T21:29:52Z
                # by relaxGen.xsl.
                
                # [DDSBACK] 22.6: Tags for Back Matter
                back = element back { back.content }
                back.content =
                  back.attributes,
                  ((tei.front | tei.Incl)*,
                   ((tei.divtop, (tei.divtop | titlePage | tei.Incl)*)
                    | (\div, (\div | tei.front | tei.Incl)*)
                    | (div1, (div1 | tei.front | tei.Incl)*))?,
                   (trailer | closer)*)
                back.attributes =
                  tei.global.attributes,
                  tei.declaring.attributes,
                  [ a:defaultValue = "back" ]
                  attribute TEIform { text }?
                #  end of [DDSBACK]  22.6
                
              }
            }
            #  end of [DDS]  22.7
            
          }
        }
        #  end of [DSTCBGN]  3.4
        
      }
    }
    div {
      # include "Schema/core.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-03-10T21:29:52Z
        # by relaxGen.xsl.
        IGNORE = notAllowed
        INCLUDE = empty
        # Weird special cases
        TEI...end = notAllowed
        mix.dictionaries |= notAllowed
        mix.drama |= notAllowed
        mix.spoken |= notAllowed
        mix.verse |= notAllowed
        tei.comp.dictionaries |= notAllowed
        tei.comp.spoken |= notAllowed
        tei.comp.verse |= notAllowed
        tei.pointer.attributes |= notAllowed
        tei.comp.terminology = notAllowed
        mix.terminology |= notAllowed
        tei.linking.attributes |= empty
        tei.analysis.attributes |= empty
        tei.enjamb.attributes |= empty
        tei.metrical.attributes |= empty
        # [DCO] 6.12: Elements available in all forms of the TEI main DTD
        
        # Definition of elements, sub-group by sub-group.
        
        # [DCOTOPELEMENTS] 3.6.1: TEI2
        
        # A TEI document is a text preceded by a TEI header.
        TEI = element TEI { TEI.content }
        TEI.content = TEI.attributes, (tei.teiHeader, tei.teiText)
        TEI.attributes =
          tei.global.attributes,
          [ a:defaultValue = "5.0" ] attribute version { text }?,
          [ a:defaultValue = "TEI" ] attribute TEIform { text }?
        # A TEI corpus is a series of TEI documents, preceded by a
        # corpus-level TEI header.
        teiCorpus = element teiCorpus { teiCorpus.content }
        teiCorpus.content = teiCorpus.attributes, (teiHeader, TEI+)
        teiCorpus.attributes =
          tei.global.attributes,
          [ a:defaultValue = "teiCorpus" ] attribute TEIform { text }?
        #  end of [DCOTOPELEMENTS]  3.6.1
        
        # [DCOPA] 6.1: Paragraph
        p = element p { p.content }
        p.content = p.attributes, macro.paraContent
        p.attributes =
          tei.global.attributes,
          [ a:defaultValue = "p" ] attribute TEIform { text }?
        tei.paragraph |= p
        tei.chunk |= p
        #  end of [DCOPA]  6.1
        
        # [DCOHQ] 6.3.2.1: Highlighted phrases
        foreign = element foreign { foreign.content }
        foreign.content = foreign.attributes, macro.paraContent
        foreign.attributes =
          tei.global.attributes,
          [ a:defaultValue = "foreign" ] attribute TEIform { text }?
        tei.hqphrase |= foreign
        # [DCOHQ1] 6.3.2.2
        emph = element emph { emph.content }
        emph.content = emph.attributes, macro.paraContent
        emph.attributes =
          tei.global.attributes,
          [ a:defaultValue = "emph" ] attribute TEIform { text }?
        tei.hqphrase |= emph
        hi = element hi { hi.content }
        hi.content = hi.attributes, macro.paraContent
        hi.attributes =
          tei.global.attributes,
          [ a:defaultValue = "hi" ] attribute TEIform { text }?
        tei.hqphrase |= hi
        #  end of [DCOHQ1]  6.3.2.2
        
        # [DCOHQ3] 6.3.2.3
        distinct = element distinct { distinct.content }
        distinct.content = distinct.attributes, macro.phraseSeq
        distinct.attributes =
          tei.global.attributes,
          attribute type { distinct.attributes.type.values }?,
          attribute time { distinct.attributes.time.values }?,
          attribute space { distinct.attributes.space.values }?,
          attribute social { distinct.attributes.social.values }?,
          [ a:defaultValue = "distinct" ] attribute TEIform { text }?
        distinct.attributes.type.values = text
        distinct.attributes.time.values = text
        distinct.attributes.space.values = text
        distinct.attributes.social.values = text
        tei.hqphrase |= distinct
        #  end of [DCOHQ3]  6.3.2.3
        
        # [DCOHQQ] 6.3.3: Quotation
        q = element q { q.content }
        q.content = q.attributes, macro.specialPara
        q.attributes =
          tei.global.attributes,
          attribute type { q.attributes.type.values }?,
          [ a:defaultValue = "unknown" ]
          attribute direct { datatype.UBoolean }?,
          attribute who { datatype.Key }?,
          [ a:defaultValue = "q" ] attribute TEIform { text }?
        q.attributes.type.values = text
        tei.hqinter |= q
        quote = element quote { quote.content }
        quote.content = quote.attributes, macro.specialPara
        quote.attributes =
          tei.global.attributes,
          [ a:defaultValue = "quote" ] attribute TEIform { text }?
        tei.hqinter |= quote
        cit = element cit { cit.content }
        cit.content =
          cit.attributes, (q | quote | tei.bibl | tei.loc | tei.Incl)+
        cit.attributes =
          tei.global.attributes,
          [ a:defaultValue = "cit" ] attribute TEIform { text }?
        tei.hqinter |= cit
        soCalled = element soCalled { soCalled.content }
        soCalled.content = soCalled.attributes, macro.phraseSeq
        soCalled.attributes =
          tei.global.attributes,
          [ a:defaultValue = "soCalled" ] attribute TEIform { text }?
        tei.hqphrase |= soCalled
        #  end of [DCOHQQ]  6.3.3
        
        # [DCOHQU] 6.3.4: Terms, glosses, etc.
        term = element term { term.content }
        term.content = term.attributes, macro.phraseSeq
        term.attributes =
          tei.global.attributes,
          attribute type { datatype.Key }?,
          [ a:defaultValue = "term" ] attribute TEIform { text }?
        tei.hqphrase |= term
        mentioned = element mentioned { mentioned.content }
        mentioned.content = mentioned.attributes, macro.phraseSeq
        mentioned.attributes =
          tei.global.attributes,
          [ a:defaultValue = "mentioned" ] attribute TEIform { text }?
        tei.hqphrase |= mentioned
        gloss = element gloss { gloss.content }
        gloss.content = gloss.attributes, macro.phraseSeq
        gloss.attributes =
          tei.global.attributes,
          attribute target { datatype.IDref }?,
          [ a:defaultValue = "gloss" ] attribute TEIform { text }?
        tei.hqphrase |= gloss
        #  end of [DCOHQU]  6.3.4
        
        #  end of [DCOHQ]  6.3.2.1
        
        # [DCONA] 6.4.1: Proper Nouns
        name = element name { name.content }
        name.content = name.attributes, macro.phraseSeq
        name.attributes =
          tei.global.attributes,
          tei.names.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "name" ] attribute TEIform { text }?
        tei.data |= name
        tei.agent |= name
        tei.addrPart |= name
        rs = element rs { rs.content }
        rs.content = rs.attributes, macro.phraseSeq
        rs.attributes =
          tei.global.attributes,
          tei.names.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "rs" ] attribute TEIform { text }?
        tei.data |= rs
        #  end of [DCONA]  6.4.1
        
        # [DCONU] 6.4.3: Numbers and measures
        num = element num { num.content }
        num.content = num.attributes, macro.phraseSeq
        num.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          attribute value { datatype.NonNegativeInteger }?,
          [ a:defaultValue = "num" ] attribute TEIform { text }?
        tei.data |= num
        measure = element measure { measure.content }
        measure.content = measure.attributes, macro.phraseSeq
        measure.attributes =
          tei.global.attributes,
          tei.names.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "measure" ] attribute TEIform { text }?
        tei.data |= measure
        #  end of [DCONU]  6.4.3
        
        # [DCODA] 6.4.4: Dates and times
        date = element date { date.content }
        date.content = date.attributes, macro.phraseSeq
        date.attributes =
          tei.global.attributes,
          attribute calendar { datatype.Text }?,
          attribute value { datatype.Date }?,
          attribute certainty { datatype.Text }?,
          [ a:defaultValue = "date" ] attribute TEIform { text }?
        tei.data |= date
        tei.date |= date
        dateRange = element dateRange { dateRange.content }
        dateRange.content = dateRange.attributes, macro.phraseSeq
        dateRange.attributes =
          tei.global.attributes,
          attribute calendar { datatype.Text }?,
          attribute from { datatype.Date }?,
          attribute to { datatype.Date }?,
          attribute exact { "to" | "from" | "both" | "none" }?,
          [ a:defaultValue = "dateRange" ] attribute TEIform { text }?
        tei.data |= dateRange
        tei.date |= dateRange
        time = element time { time.content }
        time.content = time.attributes, macro.phraseSeq
        time.attributes =
          tei.global.attributes,
          attribute value { datatype.Time }?,
          attribute type { "am" | "pm" | "24hour" | "descriptive" }?,
          attribute zone { datatype.Text }?,
          [ a:defaultValue = "time" ] attribute TEIform { text }?
        tei.data |= time
        timeRange = element timeRange { timeRange.content }
        timeRange.content = timeRange.attributes, macro.phraseSeq
        timeRange.attributes =
          tei.global.attributes,
          attribute from { datatype.Time }?,
          attribute to { datatype.Time }?,
          attribute exact { "to" | "from" | "both" | "none" }?,
          [ a:defaultValue = "timeRange" ] attribute TEIform { text }?
        tei.data |= timeRange
        #  end of [DCODA]  6.4.4
        
        # [DCOAB] 6.4.5: Abbreviations
        abbr = element abbr { abbr.content }
        abbr.content = abbr.attributes, macro.phraseSeq
        abbr.attributes =
          tei.global.attributes,
          attribute expan { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "abbr" ] attribute TEIform { text }?
        tei.data |= abbr
        expan = element expan { expan.content }
        expan.content = expan.attributes, macro.phraseSeq
        expan.attributes =
          tei.global.attributes,
          attribute abbr { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute type { expan.attributes.type.values }?,
          [ a:defaultValue = "expan" ] attribute TEIform { text }?
        expan.attributes.type.values = text
        tei.data |= expan
        #  end of [DCOAB]  6.4.5
        
        # [DCOEDC] 6.5.1: Editorial tags for correction
        sic = element sic { sic.content }
        sic.content = sic.attributes, macro.specialPara
        sic.attributes =
          tei.global.attributes,
          attribute corr { datatype.Text }?,
          attribute resp { datatype.Key }?,
          attribute cert { datatype.Text }?,
          [ a:defaultValue = "sic" ] attribute TEIform { text }?
        tei.edit |= sic
        corr = element corr { corr.content }
        corr.content = corr.attributes, macro.specialPara
        corr.attributes =
          tei.global.attributes,
          attribute sic { datatype.Text }?,
          attribute resp { datatype.Text }?,
          attribute cert { datatype.Text }?,
          [ a:defaultValue = "corr" ] attribute TEIform { text }?
        tei.edit |= corr
        #  end of [DCOEDC]  6.5.1
        
        # [DCOEDR] 6.5.2: Editorial tags for regularization
        reg = element reg { reg.content }
        reg.content = reg.attributes, macro.phraseSeq
        reg.attributes =
          tei.global.attributes,
          attribute orig { datatype.Text }?,
          attribute resp { reg.attributes.resp.values }?,
          [ a:defaultValue = "reg" ] attribute TEIform { text }?
        reg.attributes.resp.values = text
        tei.edit |= reg
        orig = element orig { orig.content }
        orig.content = orig.attributes, macro.phraseSeq
        orig.attributes =
          tei.global.attributes,
          attribute reg { datatype.Text }?,
          attribute resp { datatype.Text }?,
          [ a:defaultValue = "orig" ] attribute TEIform { text }?
        tei.edit |= orig
        #  end of [DCOEDR]  6.5.2
        
        # [DCOEDA] 6.5.3: Other editorial tags
        gap = element gap { gap.content }
        gap.content = gap.attributes, empty
        gap.attributes =
          tei.global.attributes,
          attribute desc { datatype.Text }?,
          attribute reason { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute hand { datatype.IDref }?,
          attribute agent { datatype.Text }?,
          attribute extent { datatype.Text }?,
          [ a:defaultValue = "gap" ] attribute TEIform { text }?
        tei.editIncl |= gap
        add = element add { add.content }
        add.content = add.attributes, macro.specialPara
        add.attributes =
          tei.global.attributes,
          attribute place { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          [ a:defaultValue = "add" ] attribute TEIform { text }?
        tei.edit |= add
        del = element del { del.content }
        del.content = del.attributes, macro.phraseSeq
        del.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "unremarkable" ]
          attribute status { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          [ a:defaultValue = "del" ] attribute TEIform { text }?
        tei.edit |= del
        unclear = element unclear { unclear.content }
        unclear.content = unclear.attributes, macro.paraContent
        unclear.attributes =
          tei.global.attributes,
          attribute reason { datatype.Text }?,
          attribute resp { datatype.Key }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          attribute agent { datatype.Text }?,
          [ a:defaultValue = "unclear" ] attribute TEIform { text }?
        tei.edit |= unclear
        #  end of [DCOEDA]  6.5.3
        
        # [DCOAD] 6.4.2: Addresses and their components
        address = element address { address.content }
        address.content =
          address.attributes,
          (tei.Incl*,
           ((addrLine, tei.Incl*)+ | (tei.addrPart, tei.Incl*)*))
        address.attributes =
          tei.global.attributes,
          [ a:defaultValue = "address" ] attribute TEIform { text }?
        tei.data |= address
        addrLine = element addrLine { addrLine.content }
        addrLine.content = addrLine.attributes, macro.phraseSeq
        addrLine.attributes =
          tei.global.attributes,
          [ a:defaultValue = "addrLine" ] attribute TEIform { text }?
        street = element street { street.content }
        street.content = street.attributes, macro.phraseSeq
        street.attributes =
          tei.global.attributes,
          [ a:defaultValue = "street" ] attribute TEIform { text }?
        tei.addrPart |= street
        postCode = element postCode { postCode.content }
        postCode.content = postCode.attributes, text
        postCode.attributes =
          tei.global.attributes,
          [ a:defaultValue = "postCode" ] attribute TEIform { text }?
        tei.addrPart |= postCode
        postBox = element postBox { postBox.content }
        postBox.content = postBox.attributes, text
        postBox.attributes =
          tei.global.attributes,
          [ a:defaultValue = "postBox" ] attribute TEIform { text }?
        tei.addrPart |= postBox
        # Other components of addresses should be represented
        # using the general purpose NAME element
        
        #  end of [DCOAD]  6.4.2
        
        # [DCOXR] 6.6: Simple cross references
        ptr = element ptr { ptr.content }
        ptr.content = ptr.attributes, empty
        ptr.attributes =
          tei.global.attributes,
          tei.pointer.attributes,
          attribute target { datatype.IDrefs },
          [ a:defaultValue = "ptr" ] attribute TEIform { text }?
        tei.loc |= ptr
        ref = element ref { ref.content }
        ref.content = ref.attributes, macro.paraContent
        ref.attributes =
          tei.global.attributes,
          tei.pointer.attributes,
          attribute target { datatype.IDrefs }?,
          [ a:defaultValue = "ref" ] attribute TEIform { text }?
        tei.loc |= ref
        #  end of [DCOXR]  6.6
        
        # [DCOLI] 6.7: Lists and List Items
        \list = element list { list.content }
        list.content =
          list.attributes,
          (tei.Incl*,
           (head, tei.Incl*)?,
           ((item, tei.Incl*)*
            | ((headLabel, tei.Incl*)?,
               (headItem, tei.Incl*)?,
               (label, tei.Incl*, item, tei.Incl*)+)))
        list.attributes =
          tei.global.attributes,
          [ a:defaultValue = "simple" ]
          attribute type { datatype.Text }?,
          [ a:defaultValue = "list" ] attribute TEIform { text }?
        item = element item { item.content }
        item.content = item.attributes, macro.specialPara
        item.attributes =
          tei.global.attributes,
          [ a:defaultValue = "item" ] attribute TEIform { text }?
        label = element label { label.content }
        label.content = label.attributes, macro.phraseSeq
        label.attributes =
          tei.global.attributes,
          [ a:defaultValue = "label" ] attribute TEIform { text }?
        head = element head { head.content }
        head.content = head.attributes, macro.paraContent
        head.attributes =
          tei.global.attributes,
          attribute type { head.attributes.type.values }?,
          [ a:defaultValue = "head" ] attribute TEIform { text }?
        head.attributes.type.values = text
        tei.divtop |= head
        tei.fmchunk |= head
        headLabel = element headLabel { headLabel.content }
        headLabel.content = headLabel.attributes, macro.phraseSeq
        headLabel.attributes =
          tei.global.attributes,
          [ a:defaultValue = "headLabel" ] attribute TEIform { text }?
        headItem = element headItem { headItem.content }
        headItem.content = headItem.attributes, macro.phraseSeq
        headItem.attributes =
          tei.global.attributes,
          [ a:defaultValue = "headItem" ] attribute TEIform { text }?
        #  end of [DCOLI]  6.7
        
        # [DCONO] 6.8.1: Annotation
        note = element note { note.content }
        note.content = note.attributes, macro.specialPara
        note.attributes =
          tei.global.attributes,
          attribute type { note.attributes.type.values }?,
          attribute resp { datatype.Text }?,
          [ a:defaultValue = "unspecified" ]
          attribute place { datatype.Text }?,
          [ a:defaultValue = "true" ]
          attribute anchored { datatype.Boolean }?,
          attribute target { datatype.IDrefs }?,
          attribute targetEnd { datatype.IDrefs }?,
          [ a:defaultValue = "note" ] attribute TEIform { text }?
        note.attributes.type.values = text
        tei.notes |= note
        tei.biblPart |= note
        tei.dictionaryTopLevel |= note
        # [DCONOIX] 6.8.2: Index Entries
        index = element index { index.content }
        index.content = index.attributes, empty
        index.attributes =
          tei.global.attributes,
          attribute index { datatype.Text }?,
          attribute level1 { datatype.Text },
          attribute level2 { datatype.Text }?,
          attribute level3 { datatype.Text }?,
          attribute level4 { datatype.Text }?,
          [ a:defaultValue = "index" ] attribute TEIform { text }?
        tei.metadata |= index
        divGen = element divGen { divGen.content }
        divGen.content = divGen.attributes, empty
        divGen.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "divGen" ] attribute TEIform { text }?
        tei.front |= divGen
        #  end of [DCONOIX]  6.8.2
        
        #  end of [DCONO]  6.8.1
        
        # [DCORSM] 6.9.3: Milestone tags
        milestone = element milestone { milestone.content }
        milestone.content = milestone.attributes, empty
        milestone.attributes =
          tei.global.attributes,
          attribute ed { datatype.Text }?,
          attribute unit { datatype.Text },
          [ a:defaultValue = "milestone" ] attribute TEIform { text }?
        tei.refsys |= milestone
        pb = element pb { pb.content }
        pb.content = pb.attributes, empty
        pb.attributes =
          tei.global.attributes,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "pb" ] attribute TEIform { text }?
        tei.refsys |= pb
        lb = element lb { lb.content }
        lb.content = lb.attributes, empty
        lb.attributes =
          tei.global.attributes,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "lb" ] attribute TEIform { text }?
        tei.refsys |= lb
        cb = element cb { cb.content }
        cb.content = cb.attributes, empty
        cb.attributes =
          tei.global.attributes,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "cb" ] attribute TEIform { text }?
        tei.refsys |= cb
        #  end of [DCORSM]  6.9.3
        
        # [DCOBI] 6.10.1: Tags for Bibliographic References
        bibl = element bibl { bibl.content }
        bibl.content =
          bibl.attributes,
          (text | tei.phrase | tei.biblPart | tei.Incl)*
        bibl.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "bibl" ] attribute TEIform { text }?
        tei.bibl |= bibl
        biblStruct = element biblStruct { biblStruct.content }
        biblStruct.content =
          biblStruct.attributes,
          (tei.Incl*,
           (analytic, tei.Incl*)?,
           ((monogr, tei.Incl*), (series, tei.Incl*)*)+,
           ((note, tei.Incl*) | (idno, tei.Incl*))*)
        biblStruct.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "biblStruct" ] attribute TEIform { text }?
        tei.bibl |= biblStruct
        biblFull = element biblFull { biblFull.content }
        biblFull.content =
          biblFull.attributes,
          (tei.Incl*,
           (titleStmt, tei.Incl*),
           (editionStmt, tei.Incl*)?,
           (extent, tei.Incl*)?,
           (publicationStmt, tei.Incl*),
           (seriesStmt, tei.Incl*)?,
           (notesStmt, tei.Incl*)?,
           (sourceDesc, tei.Incl*)*)
        biblFull.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "biblFull" ] attribute TEIform { text }?
        tei.bibl |= biblFull
        listBibl = element listBibl { listBibl.content }
        listBibl.content =
          listBibl.attributes,
          (tei.Incl*,
           (head, tei.Incl*)?,
           (bibl | biblStruct | biblFull),
           (bibl | biblStruct | biblFull | tei.Incl)*,
           (tei.divbot, tei.Incl*)?)
        listBibl.attributes =
          tei.global.attributes,
          tei.declarable.attributes,
          [ a:defaultValue = "listBibl" ] attribute TEIform { text }?
        # [DCOBILV] 6.10.2.1: Levels of bibliographic information
        analytic = element analytic { analytic.content }
        analytic.content =
          analytic.attributes,
          (author | editor | respStmt | title | tei.Incl)*
        analytic.attributes =
          tei.global.attributes,
          [ a:defaultValue = "analytic" ] attribute TEIform { text }?
        tei.biblPart |= analytic
        monogr = element monogr { monogr.content }
        monogr.content =
          monogr.attributes,
          ((tei.Incl*,
            (((author | editor | respStmt),
              (author | editor | respStmt | tei.Incl)*,
              (title, tei.Incl*)+,
              ((editor | respStmt), tei.Incl*)*)
             | ((title, tei.Incl*)+,
                ((author | editor | respStmt), tei.Incl*)*)))?,
           ((note | meeting), tei.Incl*)*,
           (edition, (editor | respStmt | tei.Incl)*)*,
           imprint,
           (imprint | extent | biblScope | tei.Incl)*)
        monogr.attributes =
          tei.global.attributes,
          [ a:defaultValue = "monogr" ] attribute TEIform { text }?
        tei.biblPart |= monogr
        series = element series { series.content }
        series.content =
          series.attributes,
          (text | title | editor | respStmt | biblScope | tei.Incl)*
        series.attributes =
          tei.global.attributes,
          [ a:defaultValue = "series" ] attribute TEIform { text }?
        tei.biblPart |= series
        #  end of [DCOBILV]  6.10.2.1
        
        # [DCOBICOR] 6.10.2.2: Author, title, etc.
        author = element author { author.content }
        author.content = author.attributes, macro.phraseSeq
        author.attributes =
          tei.global.attributes,
          [ a:defaultValue = "author" ] attribute TEIform { text }?
        tei.biblPart |= author
        editor = element editor { editor.content }
        editor.content = editor.attributes, macro.phraseSeq
        editor.attributes =
          tei.global.attributes,
          [ a:defaultValue = "editor" ]
          attribute role { editor.attributes.role.values }?,
          [ a:defaultValue = "editor" ] attribute TEIform { text }?
        editor.attributes.role.values = text
        tei.biblPart |= editor
        respStmt = element respStmt { respStmt.content }
        respStmt.content =
          respStmt.attributes, (resp | name | tei.Incl)+
        respStmt.attributes =
          tei.global.attributes,
          [ a:defaultValue = "respStmt" ] attribute TEIform { text }?
        tei.biblPart |= respStmt
        resp = element resp { resp.content }
        resp.content = resp.attributes, macro.phraseSeq
        resp.attributes =
          tei.global.attributes,
          [ a:defaultValue = "resp" ] attribute TEIform { text }?
        title = element title { title.content }
        title.content = title.attributes, macro.paraContent
        title.attributes =
          tei.global.attributes,
          attribute level { "a" | "m" | "j" | "s" | "u" }?,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "title" ] attribute TEIform { text }?
        tei.hqphrase |= title
        meeting = element meeting { meeting.content }
        meeting.content = meeting.attributes, macro.paraContent
        meeting.attributes =
          tei.global.attributes,
          [ a:defaultValue = "meeting" ] attribute TEIform { text }?
        #  end of [DCOBICOR]  6.10.2.2
        
        # [DCOPUB] 6.10.2.3: Bibliographic subelements
        imprint = element imprint { imprint.content }
        imprint.content =
          imprint.attributes,
          (pubPlace | publisher | date | biblScope | tei.Incl)*
        imprint.attributes =
          tei.global.attributes,
          [ a:defaultValue = "imprint" ] attribute TEIform { text }?
        tei.biblPart |= imprint
        publisher = element publisher { publisher.content }
        publisher.content = publisher.attributes, macro.phraseSeq
        publisher.attributes =
          tei.global.attributes,
          [ a:defaultValue = "publisher" ] attribute TEIform { text }?
        tei.biblPart |= publisher
        biblScope = element biblScope { biblScope.content }
        biblScope.content = biblScope.attributes, macro.phraseSeq
        biblScope.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "biblScope" ] attribute TEIform { text }?
        tei.biblPart |= biblScope
        pubPlace = element pubPlace { pubPlace.content }
        pubPlace.content = pubPlace.attributes, macro.phraseSeq
        pubPlace.attributes =
          tei.global.attributes,
          tei.names.attributes,
          [ a:defaultValue = "pubPlace" ] attribute TEIform { text }?
        tei.biblPart |= pubPlace
        # Note and date are defined elsewhere, as are extent, address,
        # and idno.
        
        #  end of [DCOPUB]  6.10.2.3
        
        #  end of [DCOBI]  6.10.1
        
        # [DCOVE] 6.11.1: Verse
        l = element l { l.content }
        l.content = l.attributes, macro.paraContent
        l.attributes =
          tei.global.attributes,
          tei.metrical.attributes,
          tei.enjamb.attributes,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?,
          [ a:defaultValue = "l" ] attribute TEIform { text }?
        tei.chunk |= l
        lg = element lg { lg.content }
        lg.content =
          lg.attributes,
          ((tei.divtop | tei.Incl)*,
           (l | lg),
           (l | lg | tei.Incl)*,
           (tei.divbot, tei.Incl*)*)
        lg.attributes =
          tei.global.attributes,
          tei.divn.attributes,
          [ a:defaultValue = "lg" ] attribute TEIform { text }?
        tei.chunk |= lg
        #  end of [DCOVE]  6.11.1
        
        # [DCODR] 6.11.2: Drama
        sp = element sp { sp.content }
        sp.content =
          sp.attributes,
          (tei.Incl*,
           (speaker, tei.Incl*)?,
           ((p | l | lg | tei.segment | stage), tei.Incl*)+)
        sp.attributes =
          tei.global.attributes,
          attribute who { datatype.IDrefs }?,
          [ a:defaultValue = "sp" ] attribute TEIform { text }?
        tei.chunk |= sp
        speaker = element speaker { speaker.content }
        speaker.content = speaker.attributes, macro.phraseSeq
        speaker.attributes =
          tei.global.attributes,
          [ a:defaultValue = "speaker" ] attribute TEIform { text }?
        stage = element stage { stage.content }
        stage.content = stage.attributes, macro.specialPara
        stage.attributes =
          tei.global.attributes,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "stage" ] attribute TEIform { text }?
        tei.inter |= stage
        tei.common |= stage
        #  end of [DCODR]  6.11.2
        
        #  end of [DCO]  6.12
        
      }
    }
  }
}
div {
  # include "docbook.rng"
  start = TEI
  div {
    # DocBook NG: The "Bourbon" Release
    
    # See http://docbook.org/docbook-ng/
    status.attribute = attribute status { text }
    label.attribute = attribute label { text }
    divisions = db.part | db.reference
    components =
      db.dedication
      | db.preface
      | db.chapter
      | db.appendix
      | db.article
      | db.colophon
    navigation.components =
      notAllowed | db.glossary | db.bibliography | db.index | db.toc
    component.contentmodel =
      navigation.components*, blocks.or.sections, navigation.components*
    setindex.components = notAllowed | db.setindex
    toc.components = notAllowed | db.toc
    [ db:refname [ "set" ] db:refpurpose [ ] ]
    div {
      local.set.attributes = empty
      set.status.attribute = status.attribute
      set.role.attribute = attribute role { text }
      set.attlist =
        set.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & set.status.attribute?
        & local.set.attributes
      set.info = docbook.info.titlereq
      db.set =
        [
          s:rule [
            context = "/db:set"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:set {
          set.attlist,
          set.info,
          toc.components?,
          (db.set | db.book)+,
          setindex.components?
        }
    }
    [ db:refname [ "book" ] db:refpurpose [ ] ]
    div {
      local.book.attributes = empty
      book.status.attribute = status.attribute
      book.role.attribute = attribute role { text }
      book.attlist =
        book.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & book.status.attribute?
        & local.book.attributes
      book.info = docbook.info.titlereq
      db.book =
        [
          s:rule [
            context = "/db:book"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:book {
          book.attlist,
          book.info,
          (navigation.components | components | divisions)+
        }
    }
    [ db:refname [ "dedication" ] db:refpurpose [ ] ]
    div {
      local.dedication.attributes = empty
      dedication.status.attribute = status.attribute
      dedication.role.attribute = attribute role { text }
      dedication.attlist =
        dedication.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & dedication.status.attribute?
        & local.dedication.attributes
      dedication.info = docbook.info
      db.dedication =
        [
          s:rule [
            context = "/db:dedication"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:dedication {
          dedication.attlist, dedication.info, blocks+
        }
    }
    [ db:refname [ "colophon" ] db:refpurpose [ ] ]
    div {
      local.colophon.attributes = empty
      colophon.status.attribute = status.attribute
      colophon.role.attribute = attribute role { text }
      colophon.attlist =
        colophon.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & colophon.status.attribute?
        & local.colophon.attributes
      colophon.info = docbook.info
      db.colophon =
        [
          s:rule [
            context = "/db:colophon"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:colophon { colophon.attlist, colophon.info, blocks+ }
    }
    [ db:refname [ "appendix" ] db:refpurpose [ ] ]
    div {
      local.appendix.attributes = empty
      appendix.status.attribute = status.attribute
      appendix.role.attribute = attribute role { text }
      appendix.attlist =
        appendix.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & appendix.status.attribute?
        & local.appendix.attributes
      appendix.info = docbook.info.titlereq
      db.appendix =
        [
          s:rule [
            context = "/db:appendix"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:appendix {
          appendix.attlist, appendix.info, component.contentmodel
        }
    }
    [ db:refname [ "chapter" ] db:refpurpose [ ] ]
    div {
      local.chapter.attributes = empty
      chapter.status.attribute = status.attribute
      chapter.role.attribute = attribute role { text }
      chapter.attlist =
        chapter.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & chapter.status.attribute?
        & local.chapter.attributes
      chapter.info = docbook.info.titlereq
      db.chapter =
        [
          s:rule [
            context = "/db:chapter"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:chapter {
          chapter.attlist, chapter.info, component.contentmodel
        }
    }
    part.components =
      (navigation.components | components)
      | (db.refentry | db.reference)
    [ db:refname [ "part" ] db:refpurpose [ ] ]
    div {
      local.part.attributes = empty
      part.status.attribute = status.attribute
      part.role.attribute = attribute role { text }
      part.attlist =
        part.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & part.status.attribute?
        & local.part.attributes
      part.info = docbook.info.titlereq
      db.part =
        [
          s:rule [
            context = "/db:part"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:part {
          part.attlist, part.info, db.partintro?, part.components+
        }
    }
    [ db:refname [ "preface" ] db:refpurpose [ ] ]
    div {
      local.preface.attributes = empty
      preface.status.attribute = status.attribute
      preface.role.attribute = attribute role { text }
      preface.attlist =
        preface.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & preface.status.attribute?
        & local.preface.attributes
      preface.info = docbook.info
      db.preface =
        [
          s:rule [
            context = "/db:preface"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:preface {
          preface.attlist, preface.info, component.contentmodel
        }
    }
    [ db:refname [ "partintro" ] db:refpurpose [ ] ]
    div {
      local.partintro.attributes = empty
      partintro.status.attribute = status.attribute
      partintro.role.attribute = attribute role { text }
      partintro.attlist =
        partintro.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & partintro.status.attribute?
        & local.partintro.attributes
      partintro.info = docbook.info
      db.partintro =
        element db:partintro {
          partintro.attlist, partintro.info, blocks.or.sections
        }
    }
    sections.optional = db.section* | db.simplesect*
    sections.required = db.section+ | db.simplesect+
    blocks.or.sections =
      (blocks+, sections.optional) | sections.required
    [ db:refname [ "section" ] db:refpurpose [ ] ]
    div {
      local.section.attributes = empty
      section.status.attribute = status.attribute
      section.role.attribute = attribute role { text }
      section.attlist =
        section.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & section.status.attribute?
        & local.section.attributes
      section.info = docbook.info.titlereq
      db.section =
        [
          s:rule [
            context = "/db:section"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:section {
          section.attlist, section.info, blocks.or.sections
        }
    }
    [ db:refname [ "simplesect" ] db:refpurpose [ ] ]
    div {
      local.simplesect.attributes = empty
      simplesect.status.attribute = status.attribute
      simplesect.role.attribute = attribute role { text }
      simplesect.attlist =
        simplesect.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & simplesect.status.attribute?
        & local.simplesect.attributes
      simplesect.info = docbook.info.titlereq
      db.simplesect =
        element db:simplesect {
          simplesect.attlist, simplesect.info, blocks+
        }
    }
    [ db:refname [ "ackno" ] db:refpurpose [ ] ]
    div {
      local.ackno.attributes = empty
      ackno.role.attribute = attribute role { text }
      ackno.attlist =
        ackno.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.ackno.attributes
      db.ackno = element db:ackno { ackno.attlist, para.blocks+ }
    }
    article.components.optional =
      (db.section* | db.simplesect*) | db.refentry*
    article.components.required =
      (db.section+ | db.simplesect+) | db.refentry+
    [ db:refname [ "article" ] db:refpurpose [ ] ]
    div {
      local.article.attributes = empty
      article.status.attribute = status.attribute
      article.class.attribute =
        attribute class {
          "faq"
          | "journalarticle"
          | "productsheet"
          | "specification"
          | "techreport"
          | "whitepaper"
        }
      article.role.attribute = attribute role { text }
      article.attlist =
        article.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & article.status.attribute?
        & article.class.attribute?
        & local.article.attributes
      article.info = docbook.info.titlereq
      db.article =
        [
          s:rule [
            context = "/db:article"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:article {
          article.attlist,
          article.info,
          navigation.components*,
          ((blocks+, article.components.optional)
           | article.components.required),
          (db.appendix | navigation.components | db.ackno)*
        }
    }
    [ db:refname [ "reference" ] db:refpurpose [ ] ]
    div {
      local.reference.attributes = empty
      reference.role.attribute = attribute role { text }
      reference.attlist =
        reference.role.attribute?
        & common.attributes
        & common.linking.attributes
        & status.attribute?
        & label.attribute?
        & local.reference.attributes
      reference.info = docbook.info.titlereq
      db.reference =
        [
          s:rule [
            context = "/db:reference"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:reference {
          reference.attlist, reference.info, db.partintro?, db.refentry+
        }
    }
    refsections.optional = db.refsection* | db.simplesect*
    refsections.required = db.refsection+ | db.simplesect*
    blocks.or.refsections =
      (blocks+, refsections.optional) | refsections.required
    [ db:refname [ "refentry" ] db:refpurpose [ ] ]
    div {
      local.refentry.attributes = empty
      refentry.role.attribute = attribute role { text }
      refentry.attlist =
        refentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & status.attribute?
        & label.attribute?
        & local.refentry.attributes
      refentry.info = docbook.info.titleforbidden
      db.refentry =
        [
          s:rule [
            context = "/db:refentry"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:refentry {
          refentry.attlist,
          db.indexterm*,
          refentry.info,
          db.refmeta?,
          db.refnamediv+,
          db.refsynopsisdiv?,
          db.refsection+
        }
    }
    [ db:refname [ "refmeta" ] db:refpurpose [ ] ]
    div {
      local.refmeta.attributes = empty
      refmeta.role.attribute = attribute role { text }
      refmeta.attlist =
        refmeta.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refmeta.attributes
      db.refmeta =
        element db:refmeta {
          refmeta.attlist,
          db.indexterm*,
          db.refentrytitle,
          db.manvolnum?,
          db.refmiscinfo*,
          db.indexterm*
        }
    }
    [ db:refname [ "refmiscinfo" ] db:refpurpose [ ] ]
    div {
      local.refmiscinfo.attributes = empty
      refmiscinfo.role.attribute = attribute role { text }
      refmiscinfo.attlist =
        refmiscinfo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute class { text }?
        & local.refmiscinfo.attributes
      db.refmiscinfo =
        element db:refmiscinfo { refmiscinfo.attlist, docbook.text }
    }
    [ db:refname [ "refnamediv" ] db:refpurpose [ ] ]
    div {
      local.refnamediv.attributes = empty
      refnamediv.role.attribute = attribute role { text }
      refnamediv.attlist =
        refnamediv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refnamediv.attributes
      db.refnamediv =
        element db:refnamediv {
          refnamediv.attlist,
          db.refdescriptor?,
          db.refname+,
          db.refpurpose,
          db.refclass*
        }
    }
    [ db:refname [ "refdescriptor" ] db:refpurpose [ ] ]
    div {
      local.refdescriptor.attributes = empty
      refdescriptor.role.attribute = attribute role { text }
      refdescriptor.attlist =
        refdescriptor.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refdescriptor.attributes
      db.refdescriptor =
        element db:refdescriptor { refdescriptor.attlist, inlines* }
    }
    [ db:refname [ "refname" ] db:refpurpose [ ] ]
    div {
      local.refname.attributes = empty
      refname.role.attribute = attribute role { text }
      refname.attlist =
        refname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refname.attributes
      db.refname = element db:refname { refname.attlist, inlines* }
    }
    [ db:refname [ "refpurpose" ] db:refpurpose [ ] ]
    div {
      local.refpurpose.attributes = empty
      refpurpose.role.attribute = attribute role { text }
      refpurpose.attlist =
        refpurpose.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refpurpose.attributes
      db.refpurpose =
        element db:refpurpose { refpurpose.attlist, inlines* }
    }
    [ db:refname [ "refclass" ] db:refpurpose [ ] ]
    div {
      local.refclass.attributes = empty
      refclass.role.attribute = attribute role { text }
      refclass.attlist =
        refclass.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refclass.attributes
      db.refclass =
        element db:refclass {
          refclass.attlist, (text | db.application)*
        }
    }
    [ db:refname [ "refsynopsisdiv" ] db:refpurpose [ ] ]
    div {
      local.refsynopsisdiv.attributes = empty
      refsynopsisdiv.role.attribute = attribute role { text }
      refsynopsisdiv.attlist =
        refsynopsisdiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refsynopsisdiv.attributes
      refsynopsisdiv.info = docbook.info
      db.refsynopsisdiv =
        element db:refsynopsisdiv {
          refsynopsisdiv.attlist,
          refsynopsisdiv.info,
          blocks.or.refsections
        }
    }
    [ db:refname [ "refsection" ] db:refpurpose [ ] ]
    div {
      local.refsection.attributes = empty
      refsection.role.attribute = attribute role { text }
      refsection.attlist =
        refsection.role.attribute?
        & common.attributes
        & common.linking.attributes
        & status.attribute?
        & label.attribute?
        & local.refsection.attributes
      refsection.info = docbook.info.titlereq
      db.refsection =
        element db:refsection {
          refsection.attlist, refsection.info, blocks.or.refsections
        }
    }
    anyAttribute = attribute * { text }
    id.attribute = attribute id { xsd:ID }
    xml.lang.attribute = attribute xml:lang { text }
    xml.base.attribute = attribute xml:base { text }
    remap.attribute = attribute remap { text }
    xreflabel.attribute = attribute xreflabel { text }
    revisionflag.attribute =
      attribute revisionflag { "changed" | "added" | "deleted" | "off" }
    effectivity.attributes =
      arch.attribute?,
      condition.attribute?,
      conformance.attribute?,
      os.attribute?,
      revision.attribute?,
      security.attribute?,
      userlevel.attribute?,
      vendor.attribute?
    arch.attribute = attribute arch { text }
    condition.attribute = attribute condition { text }
    conformance.attribute = attribute conformance { text }
    os.attribute = attribute os { text }
    revision.attribute = attribute revision { text }
    security.attribute = attribute security { text }
    userlevel.attribute = attribute userlevel { text }
    vendor.attribute = attribute vendor { text }
    version.attribute = attribute version { text }
    linkend.attribute = attribute linkend { xsd:IDREF }
    linkends.attribute = attribute linkends { xsd:IDREFS }
    href.attribute = attribute href { text }
    common.attributes =
      id.attribute?,
      xml.lang.attribute?,
      xml.base.attribute?,
      remap.attribute?,
      xreflabel.attribute?,
      revisionflag.attribute?,
      version.attribute?,
      effectivity.attributes
    common.attributes.idreq =
      id.attribute,
      xml.lang.attribute?,
      xml.base.attribute?,
      remap.attribute?,
      xreflabel.attribute?,
      revisionflag.attribute?,
      version.attribute?,
      effectivity.attributes
    common.linking.attributes.req = linkend.attribute | href.attribute
    common.linking.attributes = (linkend.attribute | href.attribute)?
    linenumbering.attribute =
      attribute linenumbering { "numbered" | "unnumbered" }
    startinglinenumber.attribute =
      attribute startinglinenumber { xsd:integer }
    verb-language.attribute = attribute language { text }
    continuation.attribute =
      attribute continuation { "continues" | "restarts" }
    verbatim.attributes &=
      continuation.attribute?,
      linenumbering.attribute?,
      startinglinenumber.attribute?,
      verb-language.attribute?
    float.attribute = attribute float { text }
    pgwide.attribute = attribute pgwide { "0" | "1" }
    data.format.attribute = attribute format { text }
    data.fileref.attribute = attribute fileref { text }
    data.entityref.attribute = attribute entityref { xsd:ENTITY }
    data.common.attrib &=
      data.format.attribute?,
      (data.fileref.attribute | data.entityref.attribute)
    oo-language.attribute = attribute language { text }?
    ctrl:other-attribute [
      name = "biblio.class.attrib"
      enum-name = "biblio.class-enum.attribute"
      other-name = "biblio.class-other.attributes"
    ]
    biblio.class-enum.attribute =
      attribute class {
        "doi"
        | "isbn"
        | "issn"
        | "libraryofcongress"
        | "pubnumber"
        | "uri"
      }?
    biblio.class-other.attributes =
      attribute class { "other" }?,
      attribute otherclass { xsd:NMTOKEN }
    biblio.class.attrib =
      biblio.class-enum.attribute | biblio.class-other.attributes
    ubiq.inlines =
      (db.inlinemediaobject | db.anchor | db.remark) | db.indexterm
    text.phrase = element db:phrase { docbook.text }
    docbook.text = (text | ubiq.inlines | text.phrase | db.replaceable)*
    inlines =
      text
      | ubiq.inlines
      | general.inlines
      | domain.inlines
      | extension.inlines
    general.inlines =
      (publishing.inlines
       | product.inlines
       | bibliography.inlines
       | graphic.inlines
       | indexing.inlines
       | link.inlines)
      | glossary.inlines
    domain.inlines =
      technical.inlines
      | error.inlines
      | os.inlines
      | programming.inlines
      | markup.inlines
      | math.inlines
      | gui.inlines
      | keyboard.inlines
    technical.inlines =
      (db.replaceable | db.systemitem | db.option | db.optional)
      | db.nonterminal
    error.inlines =
      db.errorcode | db.errortext | db.errorname | db.errortype
    oo.inlines = db.ooclass | db.ooexception | db.oointerface
    programming.inlines =
      db.function
      | db.parameter
      | db.varname
      | db.returnvalue
      | db.type
      | db.classname
      | db.exceptionname
      | db.interfacename
      | db.methodname
      | db.modifier
      | db.initializer
      | oo.inlines
    product.inlines =
      db.productnumber
      | db.productname
      | db.database
      | db.application
      | db.hardware
      | db.trademark
    os.inlines =
      db.prompt
      | db.envar
      | db.filename
      | db.command
      | db.computeroutput
      | db.userinput
    markup.inlines =
      db.tag
      | db.markup
      | db.token
      | db.symbol
      | db.literal
      | db.code
      | db.constant
      | db.email
    bibliography.inlines =
      db.citation
      | db.citerefentry
      | db.citetitle
      | db.citebiblioid
      | db.author
      | db.personname
      | db.orgname
      | db.editor
    publishing.inlines =
      (db.abbrev
       | db.acronym
       | db.emphasis
       | db.footnote
       | db.footnoteref
       | db.foreignphrase
       | db.phrase
       | db.quote
       | db.subscript
       | db.superscript
       | db.wordasword)
      | db.coref
    math.inlines = db.inlineequation
    graphic.inlines = db.inlinemediaobject
    indexing.inlines = notAllowed | db.indexterm
    gui.inlines =
      db.guiicon
      | db.guibutton
      | db.guimenuitem
      | db.guimenu
      | db.guisubmenu
      | db.guilabel
      | db.menuchoice
      | db.mousebutton
    keyboard.inlines =
      db.keycombo
      | db.keycap
      | db.keycode
      | db.keysym
      | db.shortcut
      | db.accel
    link.inlines = db.xref | db.uri | db.anchor
    extension.inlines = notAllowed
    blocks.nopara =
      (list.blocks
       | admonition.blocks
       | formal.blocks
       | informal.blocks
       | publishing.blocks
       | graphic.blocks
       | technical.blocks
       | verbatim.blocks
       | synopsis.blocks
       | db.bridgehead
       | db.remark
       | db.revhistory
       | db.highlights)
      | db.indexterm
    blocks = blocks.nopara | para.blocks | extension.blocks
    formal.blocks = db.equation | db.example | db.figure | db.table
    informal.blocks =
      db.informalequation
      | db.informalexample
      | db.informalfigure
      | db.informaltable
    publishing.blocks =
      db.sidebar | db.blockquote | db.address | db.epigraph
    graphic.blocks = (db.mediaobject | db.screenshot) | db.mediaobjectco
    technical.blocks =
      db.procedure
      | db.task
      | (db.productionset | db.constraintdef)
      | db.msgset
    admonition.blocks =
      db.caution | db.important | db.note | db.tip | db.warning
    list.blocks =
      (db.itemizedlist
       | db.orderedlist
       | db.procedure
       | db.simplelist
       | db.variablelist
       | db.segmentedlist)
      | db.glosslist
      | db.bibliolist
      | db.calloutlist
      | db.qandaset
    verbatim.blocks =
      (db.programlisting | db.screen | db.literallayout | db.synopsis)
      | db.programlistingco
      | db.screenco
    synopsis.blocks =
      db.cmdsynopsis
      | db.funcsynopsis
      | db.classsynopsis
      | db.methodsynopsis
      | db.constructorsynopsis
      | db.destructorsynopsis
      | db.fieldsynopsis
    extension.blocks = notAllowed
    [ db:refname [ "title" ] db:refpurpose [ ] ]
    div {
      local.title.attributes = empty
      title.role.attribute = attribute role { text }
      title.attlist =
        title.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.title.attributes
      db.title = element db:title { title.attlist, inlines* }
    }
    [ db:refname [ "titleabbrev" ] db:refpurpose [ ] ]
    div {
      local.titleabbrev.attributes = empty
      titleabbrev.role.attribute = attribute role { text }
      titleabbrev.attlist =
        titleabbrev.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.titleabbrev.attributes
      db.titleabbrev =
        element db:titleabbrev { titleabbrev.attlist, inlines* }
    }
    [ db:refname [ "subtitle" ] db:refpurpose [ ] ]
    div {
      local.subtitle.attributes = empty
      subtitle.role.attribute = attribute role { text }
      subtitle.attlist =
        subtitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.subtitle.attributes
      db.subtitle = element db:subtitle { subtitle.attlist, inlines* }
    }
    docbook.title = db.title? & db.titleabbrev? & db.subtitle?
    docbook.titlereq = db.title & db.titleabbrev? & db.subtitle?
    docbook.titleonly = db.title? & db.titleabbrev?
    docbook.titleonlyreq = db.title & db.titleabbrev?
    info.elements =
      (db.biblioid
       | db.bibliosource
       | db.artpagenums
       | db.copyright
       | db.subjectset
       | db.keywordset
       | db.abstract
       | db.authorgroup
       | db.author
       | db.editor
       | db.othercredit
       | db.bibliocoverage
       | db.collab
       | db.confgroup
       | db.date
       | db.pubdate
       | db.edition
       | db.volumenum
       | db.issuenum
       | db.seriesvolnums
       | db.pagenums
       | db.legalnotice
       | db.publisher
       | db.releaseinfo
       | db.revhistory
       | db.printhistory)
      | (db.bibliomisc
         | db.bibliomset
         | db.bibliorelation
         | db.biblioset)
      | db.itermset
    bibliographic.elements =
      info.elements
      | db.abbrev
      | db.title
      | db.titleabbrev
      | db.subtitle
      | db.citetitle
      | db.address
      | db.affiliation
      | db.personblurb
      | db.authorinitials
      | db.personname
      | db.orgname
      | db.productname
      | db.productnumber
      | db.publishername
    docbook.info =
      (docbook.titlereq?, db.info.titleforbidden?) | db.info?
    docbook.info.titlereq =
      (docbook.titlereq, db.info.titleforbidden?) | db.info.titlereq
    docbook.info.titleonly =
      (docbook.titleonly, db.info.titleforbidden?) | db.info.titleonly
    docbook.info.titleonlyreq =
      (docbook.titleonlyreq, db.info.titleforbidden?)
      | db.info.titleonlyreq
    docbook.info.titleforbidden = db.info.titleforbidden?
    ctrl:alternate-define [
      name = "docbook.title"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.title" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.titleabbrev" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.subtitle" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    ctrl:alternate-define [
      name = "docbook.titlereq"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:ref [ name = "db.title" ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.titleabbrev" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.subtitle" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    ctrl:alternate-define [
      name = "db.info"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:element [
        name = "info"
        "\x{a}" ~
        "         "
        rng:zeroOrMore [
          "\x{a}" ~
          "            "
          rng:choice [
            "\x{a}" ~
            "               "
            rng:ref [ name = "docbook.title" ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "               "
            rng:ref [ name = "info.elements" ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          "\x{a}" ~
          "\x{a}" ~
          "\x{a}" ~
          "         "
        ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    ctrl:alternate-define [
      name = "docbook.info"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.info" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    ctrl:alternate-define [
      name = "docbook.info.titlereq"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:ref [ name = "docbook.titlereq" ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.info" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    ctrl:alternate-define [
      name = "docbook.info.titleforbidden"
      "\x{a}" ~
      "\x{a}" ~
      "      "
      rng:optional [
        "\x{a}" ~
        "         "
        rng:ref [ name = "db.info" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "      "
      ]
      "\x{a}" ~
      "\x{a}" ~
      "\x{a}" ~
      "   "
    ]
    [ db:refname [ "info" ] db:refpurpose [ ] ]
    div {
      local.info.attributes = empty
      info.role.attribute = attribute role { text }
      info.attlist =
        info.role.attribute? & common.attributes & local.info.attributes
      db.info =
        element db:info { info.attlist, docbook.title, info.elements* }
    }
    [ db:refname [ "info" ] db:refpurpose [ ] ]
    div {
      local.info.titlereq.attributes = empty
      info.titlereq.role.attribute = attribute role { text }
      info.titlereq.attlist =
        info.titlereq.role.attribute?
        & common.attributes
        & local.info.titlereq.attributes
      db.info.titlereq =
        element db:info {
          info.titlereq.attlist, docbook.titlereq, info.elements*
        }
    }
    [ db:refname [ "info" ] db:refpurpose [ ] ]
    div {
      local.info.titleonly.attributes = empty
      info.titleonly.role.attribute = attribute role { text }
      info.titleonly.attlist =
        info.titleonly.role.attribute?
        & common.attributes
        & local.info.titleonly.attributes
      db.info.titleonly =
        element db:info {
          info.titleonly.attlist, docbook.titleonly, info.elements*
        }
    }
    [ db:refname [ "info" ] db:refpurpose [ ] ]
    div {
      local.info.titleonlyreq.attributes = empty
      info.titleonlyreq.role.attribute = attribute role { text }
      info.titleonlyreq.attlist =
        info.titleonlyreq.role.attribute?
        & common.attributes
        & local.info.titleonlyreq.attributes
      db.info.titleonlyreq =
        element db:info {
          info.titleonlyreq.attlist,
          docbook.titleonlyreq,
          info.elements*
        }
    }
    [ db:refname [ "info" ] db:refpurpose [ ] ]
    div {
      local.info.titleforbidden.attributes = empty
      info.titleforbidden.role.attribute = attribute role { text }
      info.titleforbidden.attlist =
        info.titleforbidden.role.attribute?
        & common.attributes
        & local.info.titleforbidden.attributes
      db.info.titleforbidden =
        element db:info { info.titleforbidden.attlist, info.elements* }
    }
    [ db:refname [ "subjectset" ] db:refpurpose [ ] ]
    div {
      local.subjectset.attributes = empty
      subjectset.role.attribute = attribute role { text }
      subjectset.attlist =
        subjectset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute scheme { xsd:NMTOKEN }?
        & local.subjectset.attributes
      db.subjectset =
        element db:subjectset { subjectset.attlist, db.subject+ }
    }
    [ db:refname [ "subject" ] db:refpurpose [ ] ]
    div {
      local.subject.attributes = empty
      subject.role.attribute = attribute role { text }
      subject.attlist =
        subject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute weight { text }?
        & local.subject.attributes
      db.subject =
        element db:subject { subject.attlist, db.subjectterm+ }
    }
    [ db:refname [ "subjectterm" ] db:refpurpose [ ] ]
    div {
      local.subjectterm.attributes = empty
      subjectterm.role.attribute = attribute role { text }
      subjectterm.attlist =
        subjectterm.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.subjectterm.attributes
      db.subjectterm =
        element db:subjectterm { subjectterm.attlist, text }
    }
    [ db:refname [ "keywordset" ] db:refpurpose [ ] ]
    div {
      local.keywordset.attributes = empty
      keywordset.role.attribute = attribute role { text }
      keywordset.attlist =
        keywordset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.keywordset.attributes
      db.keywordset =
        element db:keywordset { keywordset.attlist, db.keyword+ }
    }
    [ db:refname [ "keyword" ] db:refpurpose [ ] ]
    div {
      local.keyword.attributes = empty
      keyword.role.attribute = attribute role { text }
      keyword.attlist =
        keyword.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.keyword.attributes
      db.keyword = element db:keyword { keyword.attlist, text }
    }
    table.choice = notAllowed | cals.table | html.table
    informaltable.choice =
      notAllowed | cals.informaltable | html.informaltable
    db.table = table.choice
    db.informaltable = informaltable.choice
    [ db:refname [ "procedure" ] db:refpurpose [ ] ]
    div {
      local.procedure.attributes = empty
      procedure.role.attribute = attribute role { text }
      procedure.attlist =
        procedure.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.procedure.attributes
      procedure.info = docbook.info.titleonly
      db.procedure =
        element db:procedure {
          procedure.attlist, procedure.info, blocks*, db.step+
        }
    }
    performance.attribute =
      attribute performance { "optional" | "required" }
    [ db:refname [ "step" ] db:refpurpose [ ] ]
    div {
      local.step.attributes = empty
      step.role.attribute = attribute role { text }
      step.attlist =
        step.role.attribute?
        & common.attributes
        & common.linking.attributes
        & performance.attribute?
        & local.step.attributes
      step.info = docbook.info.titleonly
      db.step =
        element db:step {
          step.attlist,
          step.info,
          blocks*,
          (db.substeps | db.stepalternatives)?,
          blocks*
        }
    }
    [ db:refname [ "stepalternatives" ] db:refpurpose [ ] ]
    div {
      local.stepalternatives.attributes = empty
      stepalternatives.role.attribute = attribute role { text }
      stepalternatives.attlist =
        stepalternatives.role.attribute?
        & common.attributes
        & common.linking.attributes
        & performance.attribute?
        & local.stepalternatives.attributes
      stepalternatives.info = docbook.info.titleforbidden
      db.stepalternatives =
        element db:stepalternatives {
          stepalternatives.attlist, stepalternatives.info, db.step+
        }
    }
    [ db:refname [ "substeps" ] db:refpurpose [ ] ]
    div {
      local.substeps.attributes = empty
      substeps.role.attribute = attribute role { text }
      substeps.attlist =
        substeps.role.attribute?
        & common.attributes
        & common.linking.attributes
        & performance.attribute?
        & local.substeps.attributes
      db.substeps = element db:substeps { substeps.attlist, db.step+ }
    }
    [ db:refname [ "sidebar" ] db:refpurpose [ ] ]
    div {
      local.sidebar.attributes = empty
      ctrl:exclude [ from = "db.sidebar" exclude = "db.sidebar" ]
      sidebar.role.attribute = attribute role { text }
      sidebar.attlist =
        sidebar.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.sidebar.attributes
      sidebar.info = docbook.info.titleonly
      db.sidebar =
        [
          s:rule [
            context = "db:sidebar"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:sidebar)"
              "sidebar must not occur in the descendants of sidebar"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:sidebar { sidebar.attlist, sidebar.info, blocks+ }
    }
    [ db:refname [ "abstract" ] db:refpurpose [ ] ]
    div {
      local.abstract.attributes = empty
      abstract.role.attribute = attribute role { text }
      abstract.attlist =
        abstract.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.abstract.attributes
      abstract.info = docbook.info.titleonly
      db.abstract =
        element db:abstract {
          abstract.attlist, abstract.info, para.blocks+
        }
    }
    [ db:refname [ "personblurb" ] db:refpurpose [ ] ]
    div {
      local.personblurb.attributes = empty
      personblurb.role.attribute = attribute role { text }
      personblurb.attlist =
        personblurb.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.personblurb.attributes
      personblurb.info = docbook.info.titleonly
      db.personblurb =
        element db:personblurb {
          personblurb.attlist, personblurb.info, para.blocks+
        }
    }
    [ db:refname [ "blockquote" ] db:refpurpose [ ] ]
    div {
      local.blockquote.attributes = empty
      blockquote.role.attribute = attribute role { text }
      blockquote.attlist =
        blockquote.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.blockquote.attributes
      blockquote.info = docbook.info.titleonly
      db.blockquote =
        element db:blockquote {
          blockquote.attlist, blockquote.info, db.attribution?, blocks+
        }
    }
    [ db:refname [ "attribution" ] db:refpurpose [ ] ]
    div {
      local.attribution.attributes = empty
      attribution.role.attribute = attribute role { text }
      attribution.attlist =
        attribution.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.attribution.attributes
      db.attribution =
        element db:attribution {
          attribution.attlist, (docbook.text | db.personname)
        }
    }
    renderas.attribute =
      attribute renderas {
        "other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"
      }
    [ db:refname [ "bridgehead" ] db:refpurpose [ ] ]
    div {
      local.bridgehead.attributes = empty
      bridgehead.role.attribute = attribute role { text }
      bridgehead.attlist =
        bridgehead.role.attribute?
        & common.attributes
        & common.linking.attributes
        & renderas.attribute?
        & local.bridgehead.attributes
      db.bridgehead =
        element db:bridgehead { bridgehead.attlist, inlines* }
    }
    [ db:refname [ "remark" ] db:refpurpose [ ] ]
    div {
      local.remark.attributes = empty
      remark.role.attribute = attribute role { text }
      remark.attlist =
        remark.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.remark.attributes
      db.remark = element db:remark { remark.attlist, docbook.text }
    }
    [ db:refname [ "epigraph" ] db:refpurpose [ ] ]
    div {
      local.epigraph.attributes = empty
      epigraph.role.attribute = attribute role { text }
      epigraph.attlist =
        epigraph.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.epigraph.attributes
      epigraph.info = docbook.info.titleforbidden
      db.epigraph =
        element db:epigraph {
          epigraph.attlist,
          epigraph.info,
          db.attribution?,
          (para.blocks | db.literallayout)+
        }
    }
    [ db:refname [ "footnote" ] db:refpurpose [ ] ]
    div {
      local.footnote.attributes = empty
      ctrl:exclude [ from = "db.footnote" exclude = "db.footnote" ]
      footnote.role.attribute = attribute role { text }
      footnote.attlist =
        footnote.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute label { text }?
        & local.footnote.attributes
      db.footnote =
        [
          s:rule [
            context = "db:footnote"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:footnote)"
              "footnote must not occur in the descendants of footnote"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:footnote { footnote.attlist, blocks+ }
    }
    [ db:refname [ "highlights" ] db:refpurpose [ ] ]
    div {
      local.highlights.attributes = empty
      highlights.role.attribute = attribute role { text }
      highlights.attlist =
        highlights.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.highlights.attributes
      db.highlights =
        element db:highlights {
          highlights.attlist,
          (list.blocks
           | admonition.blocks
           | para.blocks
           | indexing.inlines)+
        }
    }
    para.blocks = db.anchor | db.para | db.formalpara | db.simpara
    [ db:refname [ "formalpara" ] db:refpurpose [ ] ]
    div {
      local.formalpara.attributes = empty
      formalpara.role.attribute = attribute role { text }
      formalpara.attlist =
        formalpara.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.formalpara.attributes
      formalpara.info = docbook.info.titleonlyreq
      db.formalpara =
        element db:formalpara {
          formalpara.attlist,
          formalpara.info,
          indexing.inlines*,
          db.para
        }
    }
    [ db:refname [ "para" ] db:refpurpose [ ] ]
    div {
      local.para.attributes = empty
      para.role.attribute = attribute role { text }
      para.attlist =
        para.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.para.attributes
      para.info = docbook.info.titleforbidden
      db.para =
        [
          s:rule [
            context = "/db:para"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:para {
          para.attlist, para.info, (inlines | blocks.nopara)*
        }
    }
    [ db:refname [ "simpara" ] db:refpurpose [ ] ]
    div {
      local.simpara.attributes = empty
      simpara.role.attribute = attribute role { text }
      simpara.attlist =
        simpara.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.simpara.attributes
      simpara.info = docbook.info.titleforbidden
      db.simpara =
        element db:simpara { simpara.attlist, simpara.info, inlines* }
    }
    ctrl:exclude [
      from = "admonition.blocks"
      exclude = "admonition.blocks"
    ]
    admonition.contentmodel = docbook.info.titleonly, blocks+
    [ db:refname [ "caution" ] db:refpurpose [ ] ]
    div {
      local.caution.attributes = empty
      caution.role.attribute = attribute role { text }
      caution.attlist =
        caution.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.caution.attributes
      db.caution =
        [
          s:rule [
            context = "db:caution"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:caution)"
              "caution must not occur in the descendants of caution"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:caution"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:important)"
              "important must not occur in the descendants of caution"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:caution"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:note)"
              "note must not occur in the descendants of caution"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:caution"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:tip)"
              "tip must not occur in the descendants of caution"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:caution"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:warning)"
              "warning must not occur in the descendants of caution"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:caution { caution.attlist, admonition.contentmodel }
    }
    [ db:refname [ "important" ] db:refpurpose [ ] ]
    div {
      local.important.attributes = empty
      important.role.attribute = attribute role { text }
      important.attlist =
        important.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.important.attributes
      db.important =
        [
          s:rule [
            context = "db:important"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:caution)"
              "caution must not occur in the descendants of important"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:important"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:important)"
              "important must not occur in the descendants of important"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:important"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:note)"
              "note must not occur in the descendants of important"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:important"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:tip)"
              "tip must not occur in the descendants of important"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:important"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:warning)"
              "warning must not occur in the descendants of important"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:important {
          important.attlist, admonition.contentmodel
        }
    }
    [ db:refname [ "note" ] db:refpurpose [ ] ]
    div {
      local.note.attributes = empty
      note.role.attribute = attribute role { text }
      note.attlist =
        note.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.note.attributes
      db.note =
        [
          s:rule [
            context = "db:note"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:caution)"
              "caution must not occur in the descendants of note"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:note"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:important)"
              "important must not occur in the descendants of note"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:note"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:note)"
              "note must not occur in the descendants of note"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:note"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:tip)"
              "tip must not occur in the descendants of note"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:note"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:warning)"
              "warning must not occur in the descendants of note"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:note { note.attlist, admonition.contentmodel }
    }
    [ db:refname [ "tip" ] db:refpurpose [ ] ]
    div {
      local.tip.attributes = empty
      tip.role.attribute = attribute role { text }
      tip.attlist =
        tip.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.tip.attributes
      db.tip =
        [
          s:rule [
            context = "db:tip"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:caution)"
              "caution must not occur in the descendants of tip"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:tip"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:important)"
              "important must not occur in the descendants of tip"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:tip"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:note)"
              "note must not occur in the descendants of tip"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:tip"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:tip)"
              "tip must not occur in the descendants of tip"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:tip"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:warning)"
              "warning must not occur in the descendants of tip"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:tip { tip.attlist, admonition.contentmodel }
    }
    [ db:refname [ "warning" ] db:refpurpose [ ] ]
    div {
      local.warning.attributes = empty
      warning.role.attribute = attribute role { text }
      warning.attlist =
        warning.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.warning.attributes
      db.warning =
        [
          s:rule [
            context = "db:warning"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:caution)"
              "caution must not occur in the descendants of warning"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:warning"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:important)"
              "important must not occur in the descendants of warning"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:warning"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:note)"
              "note must not occur in the descendants of warning"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:warning"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:tip)"
              "tip must not occur in the descendants of warning"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
          s:rule [
            context = "db:warning"
            "\x{a}" ~
            "               "
            s:assert [
              test = "not(.//db:warning)"
              "warning must not occur in the descendants of warning"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:warning { warning.attlist, admonition.contentmodel }
    }
    spacing.attribute = attribute spacing { "compact" | "normal" }
    [ db:refname [ "itemizedlist" ] db:refpurpose [ ] ]
    div {
      local.itemizedlist.attributes = empty
      itemizedlist.role.attribute = attribute role { text }
      itemizedlist.attlist =
        itemizedlist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & spacing.attribute?
        & attribute mark { text }?
        & local.itemizedlist.attributes
      itemizedlist.info = docbook.info.titleonly
      db.itemizedlist =
        element db:itemizedlist {
          itemizedlist.attlist, itemizedlist.info, blocks*, db.listitem+
        }
    }
    [ db:refname [ "orderedlist" ] db:refpurpose [ ] ]
    div {
      local.orderedlist.attributes = empty
      orderedlist.role.attribute = attribute role { text }
      orderedlist.attlist =
        orderedlist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & spacing.attribute?
        & continuation.attribute?
        & attribute inheritnum { "ignore" | "inherit" }?
        & attribute numeration { text }?
        & local.orderedlist.attributes
      orderedlist.info = docbook.info.titleonly
      db.orderedlist =
        element db:orderedlist {
          orderedlist.attlist, orderedlist.info, blocks*, db.listitem+
        }
    }
    [ db:refname [ "listitem" ] db:refpurpose [ ] ]
    div {
      local.listitem.attributes = empty
      listitem.role.attribute = attribute role { text }
      listitem.attlist =
        listitem.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute override { text }?
        & local.listitem.attributes
      db.listitem = element db:listitem { listitem.attlist, blocks+ }
    }
    [ db:refname [ "segmentedlist" ] db:refpurpose [ ] ]
    div {
      local.segmentedlist.attributes = empty
      segmentedlist.role.attribute = attribute role { text }
      segmentedlist.attlist =
        segmentedlist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.segmentedlist.attributes
      segmentedlist.info = docbook.info.titleonly
      db.segmentedlist =
        element db:segmentedlist {
          segmentedlist.attlist,
          segmentedlist.info,
          db.segtitle+,
          db.seglistitem+
        }
    }
    [ db:refname [ "segtitle" ] db:refpurpose [ ] ]
    div {
      local.segtitle.attributes = empty
      segtitle.role.attribute = attribute role { text }
      segtitle.attlist =
        segtitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.segtitle.attributes
      db.segtitle = element db:segtitle { segtitle.attlist, inlines* }
    }
    [ db:refname [ "seglistitem" ] db:refpurpose [ ] ]
    div {
      local.seglistitem.attributes = empty
      seglistitem.role.attribute = attribute role { text }
      seglistitem.attlist =
        seglistitem.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.seglistitem.attributes
      db.seglistitem =
        [
          s:rule [
            context = "db:seglistitem"
            "\x{a}" ~
            "               "
            s:assert [
              test = "count(db:seg) = count(../db:segtitle)"
              "The number of seg elements must be the same as the number of segtitle elements in the parent segmentedlist"
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:seglistitem { seglistitem.attlist, db.seg+ }
    }
    [ db:refname [ "seg" ] db:refpurpose [ ] ]
    div {
      local.seg.attributes = empty
      seg.role.attribute = attribute role { text }
      seg.attlist =
        seg.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.seg.attributes
      db.seg = element db:seg { seg.attlist, inlines* }
    }
    [ db:refname [ "simplelist" ] db:refpurpose [ ] ]
    div {
      local.simplelist.attributes = empty
      simplelist.role.attribute = attribute role { text }
      simplelist.attlist =
        simplelist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute type { "horiz" | "vert" | "inline" }?
        & attribute columns { xsd:integer }?
        & local.simplelist.attributes
      db.simplelist =
        element db:simplelist { simplelist.attlist, db.member+ }
    }
    [ db:refname [ "member" ] db:refpurpose [ ] ]
    div {
      local.member.attributes = empty
      member.role.attribute = attribute role { text }
      member.attlist =
        member.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.member.attributes
      db.member = element db:member { member.attlist, inlines* }
    }
    [ db:refname [ "variablelist" ] db:refpurpose [ ] ]
    div {
      local.variablelist.attributes = empty
      variablelist.role.attribute = attribute role { text }
      variablelist.attlist =
        variablelist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute termlength { text }?
        & local.variablelist.attributes
      variablelist.info = docbook.info.titleonly
      db.variablelist =
        element db:variablelist {
          variablelist.attlist,
          variablelist.info,
          blocks*,
          db.varlistentry+
        }
    }
    [ db:refname [ "varlistentry" ] db:refpurpose [ ] ]
    div {
      local.varlistentry.attributes = empty
      varlistentry.role.attribute = attribute role { text }
      varlistentry.attlist =
        varlistentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.varlistentry.attributes
      db.varlistentry =
        element db:varlistentry {
          varlistentry.attlist, db.term+, db.listitem
        }
    }
    [ db:refname [ "term" ] db:refpurpose [ ] ]
    div {
      local.term.attributes = empty
      term.role.attribute = attribute role { text }
      term.attlist =
        term.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.term.attributes
      db.term = element db:term { term.attlist, inlines* }
    }
    floatstyle.attribute = attribute floatstyle { text }
    [ db:refname [ "example" ] db:refpurpose [ ] ]
    div {
      local.example.attributes = empty
      example.role.attribute = attribute role { text }
      example.attlist =
        example.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute label { text }?
        & floatstyle.attribute?
        & float.attribute?
        & attribute width { text }?
        & local.example.attributes
      example.info = docbook.info.titleonlyreq
      db.example =
        element db:example { example.attlist, example.info, blocks+ }
    }
    [ db:refname [ "informalexample" ] db:refpurpose [ ] ]
    div {
      local.informalexample.attributes = empty
      informalexample.role.attribute = attribute role { text }
      informalexample.attlist =
        informalexample.role.attribute?
        & common.attributes
        & common.linking.attributes
        & floatstyle.attribute?
        & attribute width { text }?
        & local.informalexample.attributes
      informalexample.info = docbook.info.titleforbidden
      db.informalexample =
        element db:informalexample {
          informalexample.attlist, informalexample.info, blocks+
        }
    }
    verbatim.inlines = (inlines | db.lineannotation) | db.co
    verbatim.contentmodel =
      docbook.info.titleforbidden, (db.textobject | verbatim.inlines*)
    [ db:refname [ "programlisting" ] db:refpurpose [ ] ]
    div {
      local.programlisting.attributes = empty
      programlisting.role.attribute = attribute role { text }
      programlisting.attlist =
        programlisting.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & attribute width { text }?
        & local.programlisting.attributes
      db.programlisting =
        element db:programlisting {
          programlisting.attlist, verbatim.contentmodel
        }
    }
    [ db:refname [ "literallayout" ] db:refpurpose [ ] ]
    div {
      local.literallayout.attributes = empty
      literallayout.role.attribute = attribute role { text }
      literallayout.attlist =
        literallayout.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & attribute class { "monospaced" | "normal" }?
        & local.literallayout.attributes
      db.literallayout =
        element db:literallayout {
          literallayout.attlist, verbatim.contentmodel
        }
    }
    [ db:refname [ "screen" ] db:refpurpose [ ] ]
    div {
      local.screen.attributes = empty
      screen.role.attribute = attribute role { text }
      screen.attlist =
        screen.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & attribute width { text }?
        & local.screen.attributes
      db.screen =
        element db:screen { screen.attlist, verbatim.contentmodel }
    }
    screenshot.block = db.mediaobject | db.mediaobjectco
    [ db:refname [ "screenshot" ] db:refpurpose [ ] ]
    div {
      local.screenshot.attributes = empty
      screenshot.role.attribute = attribute role { text }
      screenshot.attlist =
        screenshot.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.screenshot.attributes
      screenshot.info = docbook.info
      db.screenshot =
        element db:screenshot {
          screenshot.attlist, screenshot.info, screenshot.block
        }
    }
    [ db:refname [ "figure" ] db:refpurpose [ ] ]
    div {
      local.figure.attributes = empty
      figure.role.attribute = attribute role { text }
      figure.attlist =
        figure.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute label { text }?
        & pgwide.attribute?
        & floatstyle.attribute?
        & float.attribute?
        & local.figure.attributes
      figure.info = docbook.info.titleonlyreq
      db.figure =
        element db:figure { figure.attlist, figure.info, blocks+ }
    }
    [ db:refname [ "informalfigure" ] db:refpurpose [ ] ]
    div {
      local.informalfigure.attributes = empty
      informalfigure.role.attribute = attribute role { text }
      informalfigure.attlist =
        informalfigure.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute label { text }?
        & pgwide.attribute?
        & floatstyle.attribute?
        & float.attribute?
        & local.informalfigure.attributes
      informalfigure.info = docbook.info.titleforbidden
      db.informalfigure =
        element db:informalfigure {
          informalfigure.attlist, informalfigure.info, blocks+
        }
    }
    mediaobject.content =
      db.videoobject | db.audioobject | db.imageobject | db.textobject
    [ db:refname [ "mediaobject" ] db:refpurpose [ ] ]
    div {
      local.mediaobject.attributes = empty
      mediaobject.role.attribute = attribute role { text }
      mediaobject.attlist =
        mediaobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.mediaobject.attributes
      mediaobject.info = docbook.info.titleforbidden
      db.mediaobject =
        element db:mediaobject {
          mediaobject.attlist, mediaobject.info, mediaobject.content+
        }
    }
    inlinemediaobject.content =
      db.videoobject | db.audioobject | db.imageobject | db.textobject
    [ db:refname [ "inlinemediaobject" ] db:refpurpose [ ] ]
    div {
      local.inlinemediaobject.attributes = empty
      inlinemediaobject.role.attribute = attribute role { text }
      inlinemediaobject.attlist =
        inlinemediaobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.inlinemediaobject.attributes
      inlinemediaobject.info = docbook.info.titleforbidden
      db.inlinemediaobject =
        element db:inlinemediaobject {
          inlinemediaobject.attlist,
          inlinemediaobject.info,
          inlinemediaobject.content+
        }
    }
    [ db:refname [ "videoobject" ] db:refpurpose [ ] ]
    div {
      local.videoobject.attributes = empty
      videoobject.role.attribute = attribute role { text }
      videoobject.attlist =
        videoobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.videoobject.attributes
      videoobject.info = docbook.info.titleforbidden
      db.videoobject =
        element db:videoobject {
          videoobject.attlist, videoobject.info, db.videodata
        }
    }
    [ db:refname [ "audioobject" ] db:refpurpose [ ] ]
    div {
      local.audioobject.attributes = empty
      audioobject.role.attribute = attribute role { text }
      audioobject.attlist =
        audioobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.audioobject.attributes
      audioobject.info = docbook.info.titleforbidden
      db.audioobject =
        element db:audioobject {
          audioobject.attlist, audioobject.info, db.audiodata
        }
    }
    imageobject.content = db.imagedata | any.svg
    [ db:refname [ "imageobject" ] db:refpurpose [ ] ]
    div {
      local.imageobject.attributes = empty
      imageobject.role.attribute = attribute role { text }
      imageobject.attlist =
        imageobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.imageobject.attributes
      imageobject.info = docbook.info.titleforbidden
      db.imageobject =
        element db:imageobject {
          imageobject.attlist, imageobject.info, imageobject.content
        }
    }
    [ db:refname [ "textobject" ] db:refpurpose [ ] ]
    div {
      local.textobject.attributes = empty
      textobject.role.attribute = attribute role { text }
      textobject.attlist =
        textobject.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.textobject.attributes
      textobject.info = docbook.info.titleforbidden
      db.textobject =
        element db:textobject {
          textobject.attlist,
          textobject.info,
          (db.phrase | db.textdata | blocks+)
        }
    }
    [ db:refname [ "videodata" ] db:refpurpose [ ] ]
    div {
      local.videodata.attributes = empty
      videodata.role.attribute = attribute role { text }
      videodata.attlist =
        videodata.role.attribute?
        & common.attributes
        & data.common.attrib
        & attribute align {
            "center" | "char" | "justify" | "left" | "right"
          }?
        & attribute valign { "bottom" | "middle" | "top" }?
        & attribute width { text }?
        & attribute contentwidth { text }?
        & attribute scalefit { "0" | "1" }?
        & attribute scale { text }?
        & attribute depth { text }?
        & attribute contentdepth { text }?
        & local.videodata.attributes
      videodata.info = docbook.info.titleforbidden
      db.videodata =
        element db:videodata { videodata.attlist, videodata.info }
    }
    [ db:refname [ "audiodata" ] db:refpurpose [ ] ]
    div {
      local.audiodata.attributes = empty
      audiodata.role.attribute = attribute role { text }
      audiodata.attlist =
        audiodata.role.attribute?
        & common.attributes
        & data.common.attrib
        & local.audiodata.attributes
      audiodata.info = docbook.info.titleforbidden
      db.audiodata =
        element db:audiodata { audiodata.attlist, audiodata.info }
    }
    [ db:refname [ "imagedata" ] db:refpurpose [ ] ]
    div {
      local.imagedata.attributes = empty
      imagedata.role.attribute = attribute role { text }
      imagedata.attlist =
        imagedata.role.attribute?
        & common.attributes
        & data.common.attrib
        & attribute align {
            "center" | "char" | "justify" | "left" | "right"
          }?
        & attribute valign { "bottom" | "middle" | "top" }?
        & attribute width { text }?
        & attribute contentwidth { text }?
        & attribute scalefit { "0" | "1" }?
        & attribute scale { text }?
        & attribute depth { text }?
        & attribute contentdepth { text }?
        & local.imagedata.attributes
      imagedata.info = docbook.info.titleforbidden
      db.imagedata =
        element db:imagedata { imagedata.attlist, imagedata.info }
    }
    [ db:refname [ "textdata" ] db:refpurpose [ ] ]
    div {
      local.textdata.attributes = empty
      textdata.role.attribute = attribute role { text }
      textdata.attlist =
        textdata.role.attribute?
        & common.attributes
        & data.common.attrib
        & attribute encoding { text }?
        & local.textdata.attributes
      textdata.info = docbook.info.titleforbidden
      db.textdata =
        element db:textdata { textdata.attlist, textdata.info }
    }
    equation.content = db.mediaobject | any.mml
    [ db:refname [ "equation" ] db:refpurpose [ ] ]
    div {
      local.equation.attributes = empty
      equation.role.attribute = attribute role { text }
      equation.attlist =
        equation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute label { text }?
        & pgwide.attribute?
        & floatstyle.attribute?
        & float.attribute?
        & local.equation.attributes
      equation.info = docbook.info.titleonlyreq
      db.equation =
        element db:equation {
          equation.attlist, equation.info, equation.content+
        }
    }
    [ db:refname [ "informalequation" ] db:refpurpose [ ] ]
    div {
      local.informalequation.attributes = empty
      informalequation.role.attribute = attribute role { text }
      informalequation.attlist =
        informalequation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.informalequation.attributes
      informalequation.info = docbook.info.titleforbidden
      db.informalequation =
        element db:informalequation {
          informalequation.attlist,
          informalequation.info,
          equation.content+
        }
    }
    inlineequation.content = db.inlinemediaobject | any.mml
    [ db:refname [ "inlineequation" ] db:refpurpose [ ] ]
    div {
      local.inlineequation.attributes = empty
      inlineequation.role.attribute = attribute role { text }
      inlineequation.attlist =
        inlineequation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.inlineequation.attributes
      db.inlineequation =
        element db:inlineequation {
          inlineequation.attlist, inlineequation.content+
        }
    }
    [ db:refname [ "synopsis" ] db:refpurpose [ ] ]
    div {
      local.synopsis.attributes = empty
      synopsis.role.attribute = attribute role { text }
      synopsis.attlist =
        synopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & attribute label { text }?
        & local.synopsis.attributes
      db.synopsis =
        element db:synopsis { synopsis.attlist, verbatim.contentmodel }
    }
    [ db:refname [ "cmdsynopsis" ] db:refpurpose [ ] ]
    div {
      local.cmdsynopsis.attributes = empty
      cmdsynopsis.role.attribute = attribute role { text }
      cmdsynopsis.attlist =
        cmdsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute sepchar { text }?
        & attribute cmdlength { text }?
        & attribute label { text }?
        & local.cmdsynopsis.attributes
      cmdsynopsis.info = docbook.info.titleforbidden
      db.cmdsynopsis =
        element db:cmdsynopsis {
          cmdsynopsis.attlist,
          cmdsynopsis.info?,
          (db.command | db.arg | db.group | db.sbr)+,
          db.synopfragment*
        }
    }
    rep.attribute = attribute rep { "norepeat" | "repeat" }
    choice.attribute = attribute choice { "opt" | "plain" | "req" }
    [ db:refname [ "arg" ] db:refpurpose [ ] ]
    div {
      local.arg.attributes = empty
      arg.role.attribute = attribute role { text }
      arg.attlist =
        arg.role.attribute?
        & common.attributes
        & common.linking.attributes
        & rep.attribute?
        & choice.attribute?
        & local.arg.attributes
      db.arg =
        element db:arg {
          arg.attlist,
          (docbook.text
           | db.arg
           | db.group
           | db.option
           | db.synopfragmentref
           | db.sbr)*
        }
    }
    [ db:refname [ "group" ] db:refpurpose [ ] ]
    div {
      local.group.attributes = empty
      group.role.attribute = attribute role { text }
      group.attlist =
        group.role.attribute?
        & common.attributes
        & common.linking.attributes
        & rep.attribute?
        & choice.attribute?
        & local.group.attributes
      db.group =
        element db:group {
          group.attlist,
          (db.arg
           | db.group
           | db.option
           | db.synopfragmentref
           | db.replaceable
           | db.sbr)+
        }
    }
    [ db:refname [ "sbr" ] db:refpurpose [ ] ]
    div {
      local.sbr.attributes = empty
      sbr.role.attribute = attribute role { text }
      sbr.attlist =
        sbr.role.attribute? & common.attributes & local.sbr.attributes
      db.sbr = element db:sbr { sbr.attlist, empty }
    }
    [ db:refname [ "synopfragment" ] db:refpurpose [ ] ]
    div {
      local.synopfragment.attributes = empty
      synopfragment.role.attribute = attribute role { text }
      synopfragment.attlist =
        synopfragment.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.synopfragment.attributes
      db.synopfragment =
        element db:synopfragment {
          synopfragment.attlist, (db.arg | db.group)+
        }
    }
    [ db:refname [ "synopfragmentref" ] db:refpurpose [ ] ]
    div {
      local.synopfragmentref.attributes = empty
      synopfragmentref.role.attribute = attribute role { text }
      synopfragmentref.attlist =
        synopfragmentref.role.attribute?
        & common.attributes
        & linkend.attribute
        & local.synopfragmentref.attributes
      db.synopfragmentref =
        [
          s:rule [
            context = "db:synopfragmentref"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@linkend]) = 'synopfragment' and namespace-uri(//*[@id=current()/@linkend]) = 'http://docbook.org/docbook-ng'"
              "@linkend on synopfragmentref must point to a synopfragment."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:synopfragmentref { synopfragmentref.attlist, text }
    }
    [ db:refname [ "funcsynopsis" ] db:refpurpose [ ] ]
    div {
      local.funcsynopsis.attributes = empty
      funcsynopsis.role.attribute = attribute role { text }
      funcsynopsis.attlist =
        funcsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.funcsynopsis.attributes
      funcsynopsis.info = docbook.info.titleforbidden
      db.funcsynopsis =
        element db:funcsynopsis {
          funcsynopsis.attlist,
          funcsynopsis.info?,
          (db.funcsynopsisinfo | db.funcprototype)+
        }
    }
    [ db:refname [ "funcsynopsisinfo" ] db:refpurpose [ ] ]
    div {
      local.funcsynopsisinfo.attributes = empty
      funcsynopsisinfo.role.attribute = attribute role { text }
      funcsynopsisinfo.attlist =
        funcsynopsisinfo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & local.funcsynopsisinfo.attributes
      db.funcsynopsisinfo =
        element db:funcsynopsisinfo {
          funcsynopsisinfo.attlist, verbatim.contentmodel
        }
    }
    [ db:refname [ "funcprototype" ] db:refpurpose [ ] ]
    div {
      local.funcprototype.attributes = empty
      funcprototype.role.attribute = attribute role { text }
      funcprototype.attlist =
        funcprototype.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.funcprototype.attributes
      db.funcprototype =
        element db:funcprototype {
          funcprototype.attlist,
          db.modifier*,
          db.funcdef,
          (db.void | db.varargs | (db.paramdef+, db.varargs?)),
          db.modifier*
        }
    }
    [ db:refname [ "funcdef" ] db:refpurpose [ ] ]
    div {
      local.funcdef.attributes = empty
      funcdef.role.attribute = attribute role { text }
      funcdef.attlist =
        funcdef.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.funcdef.attributes
      db.funcdef =
        element db:funcdef {
          funcdef.attlist, (docbook.text | db.type | db.function)*
        }
    }
    [ db:refname [ "void" ] db:refpurpose [ ] ]
    div {
      local.void.attributes = empty
      void.role.attribute = attribute role { text }
      void.attlist =
        void.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.void.attributes
      db.void = element db:void { void.attlist, empty }
    }
    [ db:refname [ "varargs" ] db:refpurpose [ ] ]
    div {
      local.varargs.attributes = empty
      varargs.role.attribute = attribute role { text }
      varargs.attlist =
        varargs.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.varargs.attributes
      db.varargs = element db:varargs { varargs.attlist, empty }
    }
    [ db:refname [ "paramdef" ] db:refpurpose [ ] ]
    div {
      local.paramdef.attributes = empty
      paramdef.role.attribute = attribute role { text }
      paramdef.attlist =
        paramdef.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute choice { "opt" | "req" }?
        & local.paramdef.attributes
      db.paramdef =
        element db:paramdef {
          paramdef.attlist,
          (docbook.text | db.type | db.parameter | db.funcparams)*
        }
    }
    [ db:refname [ "funcparams" ] db:refpurpose [ ] ]
    div {
      local.funcparams.attributes = empty
      funcparams.role.attribute = attribute role { text }
      funcparams.attlist =
        funcparams.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.funcparams.attributes
      db.funcparams =
        element db:funcparams { funcparams.attlist, inlines* }
    }
    oo-method.synopsis.blocks =
      db.methodsynopsis | db.constructorsynopsis | db.destructorsynopsis
    oo-field.synopsis.blocks = db.fieldsynopsis
    [ db:refname [ "classsynopsis" ] db:refpurpose [ ] ]
    div {
      local.classsynopsis.attributes = empty
      classsynopsis.role.attribute = attribute role { text }
      classsynopsis.attlist =
        classsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & oo-language.attribute
        & attribute class { "class" | "interface" }?
        & local.classsynopsis.attributes
      db.classsynopsis =
        element db:classsynopsis {
          classsynopsis.attlist,
          oo.inlines+,
          (db.classsynopsisinfo
           | oo-method.synopsis.blocks
           | oo-field.synopsis.blocks)*
        }
    }
    [ db:refname [ "classsynopsisinfo" ] db:refpurpose [ ] ]
    div {
      local.classsynopsisinfo.attributes = empty
      classsynopsisinfo.role.attribute = attribute role { text }
      classsynopsisinfo.attlist =
        classsynopsisinfo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & local.classsynopsisinfo.attributes
      db.classsynopsisinfo =
        element db:classsynopsisinfo {
          classsynopsisinfo.attlist, verbatim.contentmodel
        }
    }
    [ db:refname [ "ooclass" ] db:refpurpose [ ] ]
    div {
      local.ooclass.attributes = empty
      ooclass.role.attribute = attribute role { text }
      ooclass.attlist =
        ooclass.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.ooclass.attributes
      db.ooclass =
        element db:ooclass {
          ooclass.attlist, db.modifier*, db.classname
        }
    }
    [ db:refname [ "oointerface" ] db:refpurpose [ ] ]
    div {
      local.oointerface.attributes = empty
      oointerface.role.attribute = attribute role { text }
      oointerface.attlist =
        oointerface.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.oointerface.attributes
      db.oointerface =
        element db:oointerface {
          oointerface.attlist, db.modifier*, db.interfacename
        }
    }
    [ db:refname [ "ooexception" ] db:refpurpose [ ] ]
    div {
      local.ooexception.attributes = empty
      ooexception.role.attribute = attribute role { text }
      ooexception.attlist =
        ooexception.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.ooexception.attributes
      db.ooexception =
        element db:ooexception {
          ooexception.attlist, db.modifier*, db.exceptionname
        }
    }
    [ db:refname [ "modifier" ] db:refpurpose [ ] ]
    div {
      local.modifier.attributes = empty
      modifier.role.attribute = attribute role { text }
      modifier.attlist =
        modifier.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.modifier.attributes
      db.modifier =
        element db:modifier { modifier.attlist, docbook.text }
    }
    [ db:refname [ "interfacename" ] db:refpurpose [ ] ]
    div {
      local.interfacename.attributes = empty
      interfacename.role.attribute = attribute role { text }
      interfacename.attlist =
        interfacename.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.interfacename.attributes
      db.interfacename =
        element db:interfacename { interfacename.attlist, docbook.text }
    }
    [ db:refname [ "exceptionname" ] db:refpurpose [ ] ]
    div {
      local.exceptionname.attributes = empty
      exceptionname.role.attribute = attribute role { text }
      exceptionname.attlist =
        exceptionname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.exceptionname.attributes
      db.exceptionname =
        element db:exceptionname { exceptionname.attlist, docbook.text }
    }
    [ db:refname [ "fieldsynopsis" ] db:refpurpose [ ] ]
    div {
      local.fieldsynopsis.attributes = empty
      fieldsynopsis.role.attribute = attribute role { text }
      fieldsynopsis.attlist =
        fieldsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & oo-language.attribute
        & local.fieldsynopsis.attributes
      db.fieldsynopsis =
        element db:fieldsynopsis {
          fieldsynopsis.attlist,
          db.modifier*,
          db.type?,
          db.varname,
          db.initializer?
        }
    }
    [ db:refname [ "initializer" ] db:refpurpose [ ] ]
    div {
      local.initializer.attributes = empty
      initializer.role.attribute = attribute role { text }
      initializer.attlist =
        initializer.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.initializer.attributes
      db.initializer =
        element db:initializer { initializer.attlist, docbook.text }
    }
    [ db:refname [ "constructorsynopsis" ] db:refpurpose [ ] ]
    div {
      local.constructorsynopsis.attributes = empty
      constructorsynopsis.role.attribute = attribute role { text }
      constructorsynopsis.attlist =
        constructorsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & oo-language.attribute
        & local.constructorsynopsis.attributes
      db.constructorsynopsis =
        element db:constructorsynopsis {
          constructorsynopsis.attlist,
          db.modifier*,
          db.methodname?,
          (db.methodparam+ | db.void?),
          db.exceptionname*
        }
    }
    [ db:refname [ "destructorsynopsis" ] db:refpurpose [ ] ]
    div {
      local.destructorsynopsis.attributes = empty
      destructorsynopsis.role.attribute = attribute role { text }
      destructorsynopsis.attlist =
        destructorsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & oo-language.attribute
        & local.destructorsynopsis.attributes
      db.destructorsynopsis =
        element db:destructorsynopsis {
          destructorsynopsis.attlist,
          db.modifier*,
          db.methodname?,
          (db.methodparam+ | db.void?),
          db.exceptionname*
        }
    }
    [ db:refname [ "methodsynopsis" ] db:refpurpose [ ] ]
    div {
      local.methodsynopsis.attributes = empty
      methodsynopsis.role.attribute = attribute role { text }
      methodsynopsis.attlist =
        methodsynopsis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & oo-language.attribute
        & local.methodsynopsis.attributes
      db.methodsynopsis =
        element db:methodsynopsis {
          methodsynopsis.attlist,
          db.modifier*,
          (db.type | db.void)?,
          db.methodname,
          (db.methodparam+ | db.void),
          db.exceptionname*,
          db.modifier*
        }
    }
    [ db:refname [ "methodname" ] db:refpurpose [ ] ]
    div {
      local.methodname.attributes = empty
      methodname.role.attribute = attribute role { text }
      methodname.attlist =
        methodname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.methodname.attributes
      db.methodname =
        element db:methodname { methodname.attlist, docbook.text }
    }
    [ db:refname [ "methodparam" ] db:refpurpose [ ] ]
    div {
      local.methodparam.attributes = empty
      methodparam.role.attribute = attribute role { text }
      methodparam.attlist =
        methodparam.role.attribute?
        & common.attributes
        & common.linking.attributes
        & rep.attribute?
        & choice.attribute?
        & local.methodparam.attributes
      db.methodparam =
        element db:methodparam {
          methodparam.attlist,
          db.modifier*,
          db.type?,
          ((db.parameter, db.initializer?) | db.funcparams),
          db.modifier*
        }
    }
    [ db:refname [ "address" ] db:refpurpose [ ] ]
    div {
      local.address.attributes = empty
      address.role.attribute = attribute role { text }
      address.attlist =
        address.role.attribute?
        & common.attributes
        & common.linking.attributes
        & verbatim.attributes
        & local.address.attributes
      db.address =
        element db:address {
          address.attlist,
          (docbook.text
           | db.personname
           | db.pob
           | db.street
           | db.city
           | db.state
           | db.postcode
           | db.country
           | db.phone
           | db.fax
           | db.email
           | db.otheraddr)*
        }
    }
    [ db:refname [ "street" ] db:refpurpose [ ] ]
    div {
      local.street.attributes = empty
      street.role.attribute = attribute role { text }
      street.attlist =
        street.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.street.attributes
      db.street = element db:street { street.attlist, docbook.text }
    }
    [ db:refname [ "pob" ] db:refpurpose [ ] ]
    div {
      local.pob.attributes = empty
      pob.role.attribute = attribute role { text }
      pob.attlist =
        pob.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.pob.attributes
      db.pob = element db:pob { pob.attlist, docbook.text }
    }
    [ db:refname [ "postcode" ] db:refpurpose [ ] ]
    div {
      local.postcode.attributes = empty
      postcode.role.attribute = attribute role { text }
      postcode.attlist =
        postcode.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.postcode.attributes
      db.postcode =
        element db:postcode { postcode.attlist, docbook.text }
    }
    [ db:refname [ "city" ] db:refpurpose [ ] ]
    div {
      local.city.attributes = empty
      city.role.attribute = attribute role { text }
      city.attlist =
        city.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.city.attributes
      db.city = element db:city { city.attlist, docbook.text }
    }
    [ db:refname [ "state" ] db:refpurpose [ ] ]
    div {
      local.state.attributes = empty
      state.role.attribute = attribute role { text }
      state.attlist =
        state.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.state.attributes
      db.state = element db:state { state.attlist, docbook.text }
    }
    [ db:refname [ "country" ] db:refpurpose [ ] ]
    div {
      local.country.attributes = empty
      country.role.attribute = attribute role { text }
      country.attlist =
        country.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.country.attributes
      db.country = element db:country { country.attlist, docbook.text }
    }
    [ db:refname [ "phone" ] db:refpurpose [ ] ]
    div {
      local.phone.attributes = empty
      phone.role.attribute = attribute role { text }
      phone.attlist =
        phone.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.phone.attributes
      db.phone = element db:phone { phone.attlist, docbook.text }
    }
    [ db:refname [ "fax" ] db:refpurpose [ ] ]
    div {
      local.fax.attributes = empty
      fax.role.attribute = attribute role { text }
      fax.attlist =
        fax.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.fax.attributes
      db.fax = element db:fax { fax.attlist, docbook.text }
    }
    [ db:refname [ "otheraddr" ] db:refpurpose [ ] ]
    div {
      local.otheraddr.attributes = empty
      otheraddr.role.attribute = attribute role { text }
      otheraddr.attlist =
        otheraddr.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.otheraddr.attributes
      db.otheraddr =
        element db:otheraddr { otheraddr.attlist, docbook.text }
    }
    [ db:refname [ "affiliation" ] db:refpurpose [ ] ]
    div {
      local.affiliation.attributes = empty
      affiliation.role.attribute = attribute role { text }
      affiliation.attlist =
        affiliation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.affiliation.attributes
      db.affiliation =
        element db:affiliation {
          affiliation.attlist,
          db.shortaffil?,
          db.jobtitle*,
          db.orgname?,
          db.orgdiv*,
          db.address*
        }
    }
    [ db:refname [ "shortaffil" ] db:refpurpose [ ] ]
    div {
      local.shortaffil.attributes = empty
      shortaffil.role.attribute = attribute role { text }
      shortaffil.attlist =
        shortaffil.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.shortaffil.attributes
      db.shortaffil =
        element db:shortaffil { shortaffil.attlist, docbook.text }
    }
    [ db:refname [ "jobtitle" ] db:refpurpose [ ] ]
    div {
      local.jobtitle.attributes = empty
      jobtitle.role.attribute = attribute role { text }
      jobtitle.attlist =
        jobtitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.jobtitle.attributes
      db.jobtitle =
        element db:jobtitle { jobtitle.attlist, docbook.text }
    }
    [ db:refname [ "orgname" ] db:refpurpose [ ] ]
    div {
      local.orgname.attributes = empty
      ctrl:other-attribute [
        name = "orgname.class.attrib"
        enum-name = "orgname.class-enum.attribute"
        other-name = "orgname.class-other.attributes"
      ]
      orgname.class-enum.attribute =
        attribute class {
          "consortium" | "corporation" | "informal" | "nonprofit"
        }?
      orgname.class-other.attributes =
        attribute class { "other" }?,
        attribute otherclass { text }
      orgname.class.attrib =
        orgname.class-enum.attribute | orgname.class-other.attributes
      orgname.role.attribute = attribute role { text }
      orgname.attlist =
        orgname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & orgname.class.attrib
        & local.orgname.attributes
      db.orgname = element db:orgname { orgname.attlist, docbook.text }
    }
    [ db:refname [ "orgdiv" ] db:refpurpose [ ] ]
    div {
      local.orgdiv.attributes = empty
      orgdiv.role.attribute = attribute role { text }
      orgdiv.attlist =
        orgdiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.orgdiv.attributes
      db.orgdiv = element db:orgdiv { orgdiv.attlist, inlines* }
    }
    [ db:refname [ "artpagenums" ] db:refpurpose [ ] ]
    div {
      local.artpagenums.attributes = empty
      artpagenums.role.attribute = attribute role { text }
      artpagenums.attlist =
        artpagenums.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.artpagenums.attributes
      db.artpagenums =
        element db:artpagenums { artpagenums.attlist, docbook.text }
    }
    [ db:refname [ "personname" ] db:refpurpose [ ] ]
    div {
      local.personname.attributes = empty
      personname.role.attribute = attribute role { text }
      personname.attlist =
        personname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.personname.attributes
      db.personname =
        element db:personname {
          personname.attlist,
          (docbook.text
           | (db.honorific
              | db.firstname
              | db.surname
              | db.lineage
              | db.othername)+)
        }
    }
    person.author =
      db.personname,
      (db.personblurb
       | db.affiliation
       | db.email
       | db.address
       | db.contrib)*
    org.author =
      db.orgname,
      (db.orgdiv | db.affiliation | db.email | db.address | db.contrib)*
    credit.contentmodel = person.author | org.author
    [ db:refname [ "author" ] db:refpurpose [ ] ]
    div {
      local.author.attributes = empty
      author.role.attribute = attribute role { text }
      author.attlist =
        author.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.author.attributes
      db.author =
        element db:author { author.attlist, credit.contentmodel }
    }
    [ db:refname [ "authorgroup" ] db:refpurpose [ ] ]
    div {
      local.authorgroup.attributes = empty
      authorgroup.role.attribute = attribute role { text }
      authorgroup.attlist =
        authorgroup.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.authorgroup.attributes
      db.authorgroup =
        element db:authorgroup {
          authorgroup.attlist, (db.author | db.editor | db.othercredit)+
        }
    }
    [ db:refname [ "collab" ] db:refpurpose [ ] ]
    div {
      local.collab.attributes = empty
      collab.role.attribute = attribute role { text }
      collab.attlist =
        collab.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.collab.attributes
      db.collab =
        element db:collab {
          collab.attlist, (db.personname | db.orgname)+, db.affiliation*
        }
    }
    [ db:refname [ "authorinitials" ] db:refpurpose [ ] ]
    div {
      local.authorinitials.attributes = empty
      authorinitials.role.attribute = attribute role { text }
      authorinitials.attlist =
        authorinitials.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.authorinitials.attributes
      db.authorinitials =
        element db:authorinitials {
          authorinitials.attlist, docbook.text
        }
    }
    [ db:refname [ "confgroup" ] db:refpurpose [ ] ]
    div {
      local.confgroup.attributes = empty
      confgroup.role.attribute = attribute role { text }
      confgroup.attlist =
        confgroup.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.confgroup.attributes
      db.confgroup =
        element db:confgroup {
          confgroup.attlist,
          (db.confdates
           | db.conftitle
           | db.confnum
           | db.confsponsor
           | db.address)*
        }
    }
    [ db:refname [ "confdates" ] db:refpurpose [ ] ]
    div {
      local.confdates.attributes = empty
      confdates.role.attribute = attribute role { text }
      confdates.attlist =
        confdates.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.confdates.attributes
      db.confdates =
        element db:confdates { confdates.attlist, docbook.text }
    }
    [ db:refname [ "conftitle" ] db:refpurpose [ ] ]
    div {
      local.conftitle.attributes = empty
      conftitle.role.attribute = attribute role { text }
      conftitle.attlist =
        conftitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.conftitle.attributes
      db.conftitle =
        element db:conftitle { conftitle.attlist, docbook.text }
    }
    [ db:refname [ "confnum" ] db:refpurpose [ ] ]
    div {
      local.confnum.attributes = empty
      confnum.role.attribute = attribute role { text }
      confnum.attlist =
        confnum.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.confnum.attributes
      db.confnum = element db:confnum { confnum.attlist, docbook.text }
    }
    [ db:refname [ "confsponsor" ] db:refpurpose [ ] ]
    div {
      local.confsponsor.attributes = empty
      confsponsor.role.attribute = attribute role { text }
      confsponsor.attlist =
        confsponsor.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.confsponsor.attributes
      db.confsponsor =
        element db:confsponsor { confsponsor.attlist, docbook.text }
    }
    [ db:refname [ "contractnum" ] db:refpurpose [ ] ]
    div {
      local.contractnum.attributes = empty
      contractnum.role.attribute = attribute role { text }
      contractnum.attlist =
        contractnum.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.contractnum.attributes
      db.contractnum =
        element db:contractnum { contractnum.attlist, docbook.text }
    }
    [ db:refname [ "contractsponsor" ] db:refpurpose [ ] ]
    div {
      local.contractsponsor.attributes = empty
      contractsponsor.role.attribute = attribute role { text }
      contractsponsor.attlist =
        contractsponsor.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.contractsponsor.attributes
      db.contractsponsor =
        element db:contractsponsor {
          contractsponsor.attlist, docbook.text
        }
    }
    [ db:refname [ "copyright" ] db:refpurpose [ ] ]
    div {
      local.copyright.attributes = empty
      copyright.role.attribute = attribute role { text }
      copyright.attlist =
        copyright.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.copyright.attributes
      db.copyright =
        element db:copyright { copyright.attlist, db.year+, db.holder* }
    }
    [ db:refname [ "year" ] db:refpurpose [ ] ]
    div {
      local.year.attributes = empty
      year.role.attribute = attribute role { text }
      year.attlist =
        year.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.year.attributes
      db.year = element db:year { year.attlist, docbook.text }
    }
    [ db:refname [ "holder" ] db:refpurpose [ ] ]
    div {
      local.holder.attributes = empty
      holder.role.attribute = attribute role { text }
      holder.attlist =
        holder.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.holder.attributes
      db.holder = element db:holder { holder.attlist, docbook.text }
    }
    [ db:refname [ "date" ] db:refpurpose [ ] ]
    div {
      local.date.attributes = empty
      date.role.attribute = attribute role { text }
      date.attlist =
        date.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.date.attributes
      db.date =
        element db:date {
          date.attlist,
          (xsd:date | xsd:dateTime | xsd:gYearMonth | xsd:gYear)
        }
    }
    [ db:refname [ "edition" ] db:refpurpose [ ] ]
    div {
      local.edition.attributes = empty
      edition.role.attribute = attribute role { text }
      edition.attlist =
        edition.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.edition.attributes
      db.edition = element db:edition { edition.attlist, docbook.text }
    }
    [ db:refname [ "editor" ] db:refpurpose [ ] ]
    div {
      local.editor.attributes = empty
      editor.role.attribute = attribute role { text }
      editor.attlist =
        editor.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.editor.attributes
      db.editor =
        element db:editor { editor.attlist, credit.contentmodel }
    }
    [ db:refname [ "biblioid" ] db:refpurpose [ ] ]
    div {
      local.biblioid.attributes = empty
      biblioid.role.attribute = attribute role { text }
      biblioid.attlist =
        biblioid.role.attribute?
        & common.attributes
        & common.linking.attributes
        & biblio.class.attrib
        & local.biblioid.attributes
      db.biblioid =
        element db:biblioid { biblioid.attlist, docbook.text }
    }
    [ db:refname [ "citebiblioid" ] db:refpurpose [ ] ]
    div {
      local.citebiblioid.attributes = empty
      citebiblioid.role.attribute = attribute role { text }
      citebiblioid.attlist =
        citebiblioid.role.attribute?
        & common.attributes
        & common.linking.attributes
        & biblio.class.attrib
        & local.citebiblioid.attributes
      db.citebiblioid =
        element db:citebiblioid { citebiblioid.attlist, docbook.text }
    }
    [ db:refname [ "bibliosource" ] db:refpurpose [ ] ]
    div {
      local.bibliosource.attributes = empty
      bibliosource.role.attribute = attribute role { text }
      bibliosource.attlist =
        bibliosource.role.attribute?
        & common.attributes
        & common.linking.attributes
        & biblio.class.attrib
        & local.bibliosource.attributes
      db.bibliosource =
        element db:bibliosource { bibliosource.attlist, docbook.text }
    }
    [ db:refname [ "bibliorelation" ] db:refpurpose [ ] ]
    div {
      local.bibliorelation.attributes = empty
      ctrl:other-attribute [
        name = "bibliorelation.type.attrib"
        enum-name = "bibliorelation.type-enum.attribute"
        other-name = "bibliorelation.type-other.attributes"
      ]
      bibliorelation.type-enum.attribute =
        attribute type {
          "hasformat"
          | "haspart"
          | "hasversion"
          | "isformatof"
          | "ispartof"
          | "isreferencedby"
          | "isreplacedby"
          | "isrequiredby"
          | "isversionof"
          | "othertype"
          | "references"
          | "replaces"
          | "requires"
        }?
      bibliorelation.type-other.attributes =
        attribute type { "othertype" }?,
        attribute othertype { xsd:NMTOKEN }
      bibliorelation.type.attrib =
        bibliorelation.type-enum.attribute
        | bibliorelation.type-other.attributes
      bibliorelation.role.attribute = attribute role { text }
      bibliorelation.attlist =
        bibliorelation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & biblio.class.attrib
        & bibliorelation.type.attrib
        & local.bibliorelation.attributes
      db.bibliorelation =
        element db:bibliorelation {
          bibliorelation.attlist, docbook.text
        }
    }
    [ db:refname [ "bibliocoverage" ] db:refpurpose [ ] ]
    div {
      local.bibliocoverage.attributes = empty
      ctrl:other-attribute [
        name = "bibliocoverage.spatial.attrib"
        enum-name = "bibliocoverage.spatial-enum.attribute"
        other-name = "bibliocoverage.spatial-other.attributes"
      ]
      bibliocoverage.spatial-enum.attribute =
        attribute spatial {
          "dcmipoint" | "iso3166" | "dcmibox" | "tgn"
        }?
      bibliocoverage.spatial-other.attributes =
        attribute spatial { "otherspatial" }?,
        attribute otherspatial { xsd:NMTOKEN }
      bibliocoverage.spatial.attrs =
        bibliocoverage.spatial-enum.attribute
        | bibliocoverage.spatial-other.attributes
      ctrl:other-attribute [
        name = "bibliocoverage.temporal.attrib"
        enum-name = "bibliocoverage.temporal-enum.attribute"
        other-name = "bibliocoverage.temporal-other.attributes"
      ]
      bibliocoverage.temporal-enum.attribute =
        attribute temporal { "dcmiperiod" | "w3c-dtf" }?
      bibliocoverage.temporal-other.attributes =
        attribute temporal { "othertemporal" }?,
        attribute othertemporal { xsd:NMTOKEN }
      bibliocoverage.temporal.attrs =
        bibliocoverage.temporal-enum.attribute
        | bibliocoverage.temporal-other.attributes
      bibliocoverage.coverage.attrib =
        bibliocoverage.spatial.attrs & bibliocoverage.temporal.attrs
      bibliocoverage.role.attribute = attribute role { text }
      bibliocoverage.attlist =
        bibliocoverage.role.attribute?
        & common.attributes
        & common.linking.attributes
        & bibliocoverage.coverage.attrib
        & local.bibliocoverage.attributes
      db.bibliocoverage =
        element db:bibliocoverage {
          bibliocoverage.attlist, docbook.text
        }
    }
    [ db:refname [ "legalnotice" ] db:refpurpose [ ] ]
    div {
      local.legalnotice.attributes = empty
      legalnotice.role.attribute = attribute role { text }
      legalnotice.attlist =
        legalnotice.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.legalnotice.attributes
      legalnotice.info = docbook.info.titleonly
      db.legalnotice =
        element db:legalnotice {
          legalnotice.attlist, legalnotice.info, blocks+
        }
    }
    [ db:refname [ "othercredit" ] db:refpurpose [ ] ]
    div {
      local.othercredit.attributes = empty
      othercredit.class.attribute =
        attribute class {
          "copyeditor"
          | "graphicdesigner"
          | "other"
          | "productioneditor"
          | "technicaleditor"
          | "translator"
        }?
      othercredit.role.attribute = attribute role { text }
      othercredit.attlist =
        othercredit.role.attribute?
        & common.attributes
        & common.linking.attributes
        & othercredit.class.attribute
        & local.othercredit.attributes
      db.othercredit =
        element db:othercredit {
          othercredit.attlist, credit.contentmodel
        }
    }
    [ db:refname [ "pagenums" ] db:refpurpose [ ] ]
    div {
      local.pagenums.attributes = empty
      pagenums.role.attribute = attribute role { text }
      pagenums.attlist =
        pagenums.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.pagenums.attributes
      db.pagenums =
        element db:pagenums { pagenums.attlist, docbook.text }
    }
    [ db:refname [ "contrib" ] db:refpurpose [ ] ]
    div {
      local.contrib.attributes = empty
      contrib.role.attribute = attribute role { text }
      contrib.attlist =
        contrib.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.contrib.attributes
      db.contrib = element db:contrib { contrib.attlist, docbook.text }
    }
    [ db:refname [ "honorific" ] db:refpurpose [ ] ]
    div {
      local.honorific.attributes = empty
      honorific.role.attribute = attribute role { text }
      honorific.attlist =
        honorific.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.honorific.attributes
      db.honorific =
        element db:honorific { honorific.attlist, docbook.text }
    }
    [ db:refname [ "firstname" ] db:refpurpose [ ] ]
    div {
      local.firstname.attributes = empty
      firstname.role.attribute = attribute role { text }
      firstname.attlist =
        firstname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.firstname.attributes
      db.firstname =
        element db:firstname { firstname.attlist, docbook.text }
    }
    [ db:refname [ "surname" ] db:refpurpose [ ] ]
    div {
      local.surname.attributes = empty
      surname.role.attribute = attribute role { text }
      surname.attlist =
        surname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.surname.attributes
      db.surname = element db:surname { surname.attlist, docbook.text }
    }
    [ db:refname [ "lineage" ] db:refpurpose [ ] ]
    div {
      local.lineage.attributes = empty
      lineage.role.attribute = attribute role { text }
      lineage.attlist =
        lineage.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.lineage.attributes
      db.lineage = element db:lineage { lineage.attlist, docbook.text }
    }
    [ db:refname [ "othername" ] db:refpurpose [ ] ]
    div {
      local.othername.attributes = empty
      othername.role.attribute = attribute role { text }
      othername.attlist =
        othername.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.othername.attributes
      db.othername =
        element db:othername { othername.attlist, docbook.text }
    }
    [ db:refname [ "printhistory" ] db:refpurpose [ ] ]
    div {
      local.printhistory.attributes = empty
      printhistory.role.attribute = attribute role { text }
      printhistory.attlist =
        printhistory.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.printhistory.attributes
      db.printhistory =
        element db:printhistory { printhistory.attlist, para.blocks+ }
    }
    [ db:refname [ "productname" ] db:refpurpose [ ] ]
    div {
      local.productname.attributes = empty
      productname.class.attribute =
        attribute class {
          "copyright" | "registered" | "service" | "trade"
        }?
      productname.role.attribute = attribute role { text }
      productname.attlist =
        productname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & productname.class.attribute
        & local.productname.attributes
      db.productname =
        element db:productname { productname.attlist, docbook.text }
    }
    [ db:refname [ "productnumber" ] db:refpurpose [ ] ]
    div {
      local.productnumber.attributes = empty
      productnumber.role.attribute = attribute role { text }
      productnumber.attlist =
        productnumber.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.productnumber.attributes
      db.productnumber =
        element db:productnumber { productnumber.attlist, docbook.text }
    }
    [ db:refname [ "pubdate" ] db:refpurpose [ ] ]
    div {
      local.pubdate.attributes = empty
      pubdate.role.attribute = attribute role { text }
      pubdate.attlist =
        pubdate.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.pubdate.attributes
      db.pubdate =
        element db:pubdate {
          pubdate.attlist,
          (xsd:date | xsd:dateTime | xsd:gYearMonth | xsd:gYear)
        }
    }
    [ db:refname [ "publisher" ] db:refpurpose [ ] ]
    div {
      local.publisher.attributes = empty
      publisher.role.attribute = attribute role { text }
      publisher.attlist =
        publisher.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.publisher.attributes
      db.publisher =
        element db:publisher {
          publisher.attlist, db.publishername, db.address*
        }
    }
    [ db:refname [ "publishername" ] db:refpurpose [ ] ]
    div {
      local.publishername.attributes = empty
      publishername.role.attribute = attribute role { text }
      publishername.attlist =
        publishername.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.publishername.attributes
      db.publishername =
        element db:publishername { publishername.attlist, docbook.text }
    }
    [ db:refname [ "releaseinfo" ] db:refpurpose [ ] ]
    div {
      local.releaseinfo.attributes = empty
      releaseinfo.role.attribute = attribute role { text }
      releaseinfo.attlist =
        releaseinfo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.releaseinfo.attributes
      db.releaseinfo =
        element db:releaseinfo { releaseinfo.attlist, docbook.text }
    }
    [ db:refname [ "revhistory" ] db:refpurpose [ ] ]
    div {
      local.revhistory.attributes = empty
      revhistory.role.attribute = attribute role { text }
      revhistory.attlist =
        revhistory.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.revhistory.attributes
      revhistory.info = docbook.info.titleonly
      db.revhistory =
        element db:revhistory {
          revhistory.attlist, revhistory.info, db.revision+
        }
    }
    [ db:refname [ "revision" ] db:refpurpose [ ] ]
    div {
      local.revision.attributes = empty
      revision.role.attribute = attribute role { text }
      revision.attlist =
        revision.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.revision.attributes
      db.revision =
        element db:revision {
          revision.attlist,
          db.revnumber,
          db.date,
          (db.authorinitials | db.author)*,
          (db.revremark | db.revdescription)?
        }
    }
    [ db:refname [ "revnumber" ] db:refpurpose [ ] ]
    div {
      local.revnumber.attributes = empty
      revnumber.role.attribute = attribute role { text }
      revnumber.attlist =
        revnumber.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.revnumber.attributes
      db.revnumber =
        element db:revnumber { revnumber.attlist, docbook.text }
    }
    [ db:refname [ "revremark" ] db:refpurpose [ ] ]
    div {
      local.revremark.attributes = empty
      revremark.role.attribute = attribute role { text }
      revremark.attlist =
        revremark.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.revremark.attributes
      db.revremark =
        element db:revremark { revremark.attlist, docbook.text }
    }
    [ db:refname [ "revdescription" ] db:refpurpose [ ] ]
    div {
      local.revdescription.attributes = empty
      revdescription.role.attribute = attribute role { text }
      revdescription.attlist =
        revdescription.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.revdescription.attributes
      db.revdescription =
        element db:revdescription { revdescription.attlist, blocks* }
    }
    [ db:refname [ "seriesvolnums" ] db:refpurpose [ ] ]
    div {
      local.seriesvolnums.attributes = empty
      seriesvolnums.role.attribute = attribute role { text }
      seriesvolnums.attlist =
        seriesvolnums.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.seriesvolnums.attributes
      db.seriesvolnums =
        element db:seriesvolnums { seriesvolnums.attlist, docbook.text }
    }
    [ db:refname [ "volumenum" ] db:refpurpose [ ] ]
    div {
      local.volumenum.attributes = empty
      volumenum.role.attribute = attribute role { text }
      volumenum.attlist =
        volumenum.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.volumenum.attributes
      db.volumenum =
        element db:volumenum { volumenum.attlist, docbook.text }
    }
    [ db:refname [ "issuenum" ] db:refpurpose [ ] ]
    div {
      local.issuenum.attributes = empty
      issuenum.role.attribute = attribute role { text }
      issuenum.attlist =
        issuenum.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.issuenum.attributes
      db.issuenum =
        element db:issuenum { issuenum.attlist, docbook.text }
    }
    [ db:refname [ ] db:refpurpose [ ] ]
    div {
      local..attributes = empty
      accel.role.attribute = attribute role { text }
      accel.attlist =
        accel.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local..attributes
      db.accel = element db:accel { accel.attlist, docbook.text }
    }
    [ db:refname [ "application" ] db:refpurpose [ ] ]
    div {
      local.application.attributes = empty
      application.class.attribute =
        attribute class { "hardware" | "software" }
      application.role.attribute = attribute role { text }
      application.attlist =
        application.role.attribute?
        & common.attributes
        & common.linking.attributes
        & application.class.attribute?
        & local.application.attributes
      db.application =
        element db:application { application.attlist, docbook.text }
    }
    [ db:refname [ "classname" ] db:refpurpose [ ] ]
    div {
      local.classname.attributes = empty
      classname.role.attribute = attribute role { text }
      classname.attlist =
        classname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.classname.attributes
      db.classname =
        element db:classname { classname.attlist, docbook.text }
    }
    [ db:refname [ "command" ] db:refpurpose [ ] ]
    div {
      local.command.attributes = empty
      command.role.attribute = attribute role { text }
      command.attlist =
        command.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.command.attributes
      db.command = element db:command { command.attlist, inlines* }
    }
    computeroutput.inlines = inlines | db.co | db.co
    [ db:refname [ "computeroutput" ] db:refpurpose [ ] ]
    div {
      local.computeroutput.attributes = empty
      computeroutput.role.attribute = attribute role { text }
      computeroutput.attlist =
        computeroutput.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.computeroutput.attributes
      db.computeroutput =
        element db:computeroutput {
          computeroutput.attlist, computeroutput.inlines*
        }
    }
    [ db:refname [ "database" ] db:refpurpose [ ] ]
    div {
      local.database.attributes = empty
      database.class.attribute =
        attribute class {
          "altkey"
          | "constraint"
          | "datatype"
          | "field"
          | "foreignkey"
          | "group"
          | "index"
          | "key1"
          | "key2"
          | "name"
          | "primarykey"
          | "procedure"
          | "record"
          | "rule"
          | "secondarykey"
          | "table"
          | "user"
          | "view"
        }
      database.role.attribute = attribute role { text }
      database.attlist =
        database.role.attribute?
        & common.attributes
        & common.linking.attributes
        & database.class.attribute?
        & local.database.attributes
      db.database =
        element db:database { database.attlist, docbook.text }
    }
    [ db:refname [ "email" ] db:refpurpose [ ] ]
    div {
      local.email.attributes = empty
      email.role.attribute = attribute role { text }
      email.attlist =
        email.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.email.attributes
      db.email = element db:email { email.attlist, docbook.text }
    }
    [ db:refname [ "envar" ] db:refpurpose [ ] ]
    div {
      local.envar.attributes = empty
      envar.role.attribute = attribute role { text }
      envar.attlist =
        envar.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.envar.attributes
      db.envar = element db:envar { envar.attlist, docbook.text }
    }
    [ db:refname [ "errorcode" ] db:refpurpose [ ] ]
    div {
      local.errorcode.attributes = empty
      errorcode.role.attribute = attribute role { text }
      errorcode.attlist =
        errorcode.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.errorcode.attributes
      db.errorcode =
        element db:errorcode { errorcode.attlist, docbook.text }
    }
    [ db:refname [ "errorname" ] db:refpurpose [ ] ]
    div {
      local.errorname.attributes = empty
      errorname.role.attribute = attribute role { text }
      errorname.attlist =
        errorname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.errorname.attributes
      db.errorname =
        element db:errorname { errorname.attlist, docbook.text }
    }
    [ db:refname [ "errortext" ] db:refpurpose [ ] ]
    div {
      local.errortext.attributes = empty
      errortext.role.attribute = attribute role { text }
      errortext.attlist =
        errortext.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.errortext.attributes
      db.errortext =
        element db:errortext { errortext.attlist, docbook.text }
    }
    [ db:refname [ "errortype" ] db:refpurpose [ ] ]
    div {
      local.errortype.attributes = empty
      errortype.role.attribute = attribute role { text }
      errortype.attlist =
        errortype.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.errortype.attributes
      db.errortype =
        element db:errortype { errortype.attlist, docbook.text }
    }
    [ db:refname [ "filename" ] db:refpurpose [ ] ]
    div {
      local.filename.attributes = empty
      filename.path.attribute = attribute path { text }
      filename.class.attribute =
        attribute class {
          "devicefile"
          | "directory"
          | "extension"
          | "headerfile"
          | "libraryfile"
          | "partition"
          | "symlink"
        }
      filename.role.attribute = attribute role { text }
      filename.attlist =
        filename.role.attribute?
        & common.attributes
        & common.linking.attributes
        & filename.path.attribute?
        & filename.class.attribute?
        & local.filename.attributes
      db.filename =
        element db:filename { filename.attlist, docbook.text }
    }
    [ db:refname [ "function" ] db:refpurpose [ ] ]
    div {
      local.function.attributes = empty
      function.role.attribute = attribute role { text }
      function.attlist =
        function.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.function.attributes
      db.function =
        element db:function { function.attlist, docbook.text }
    }
    [ db:refname [ "guibutton" ] db:refpurpose [ ] ]
    div {
      local.guibutton.attributes = empty
      guibutton.role.attribute = attribute role { text }
      guibutton.attlist =
        guibutton.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guibutton.attributes
      db.guibutton =
        element db:guibutton {
          guibutton.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "guiicon" ] db:refpurpose [ ] ]
    div {
      local.guiicon.attributes = empty
      guiicon.role.attribute = attribute role { text }
      guiicon.attlist =
        guiicon.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guiicon.attributes
      db.guiicon =
        element db:guiicon {
          guiicon.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "guilabel" ] db:refpurpose [ ] ]
    div {
      local.guilabel.attributes = empty
      guilabel.role.attribute = attribute role { text }
      guilabel.attlist =
        guilabel.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guilabel.attributes
      db.guilabel =
        element db:guilabel {
          guilabel.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "guimenu" ] db:refpurpose [ ] ]
    div {
      local.guimenu.attributes = empty
      guimenu.role.attribute = attribute role { text }
      guimenu.attlist =
        guimenu.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guimenu.attributes
      db.guimenu =
        element db:guimenu {
          guimenu.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "guimenuitem" ] db:refpurpose [ ] ]
    div {
      local.guimenuitem.attributes = empty
      guimenuitem.role.attribute = attribute role { text }
      guimenuitem.attlist =
        guimenuitem.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guimenuitem.attributes
      db.guimenuitem =
        element db:guimenuitem {
          guimenuitem.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "guisubmenu" ] db:refpurpose [ ] ]
    div {
      local.guisubmenu.attributes = empty
      guisubmenu.role.attribute = attribute role { text }
      guisubmenu.attlist =
        guisubmenu.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.guisubmenu.attributes
      db.guisubmenu =
        element db:guisubmenu {
          guisubmenu.attlist, (docbook.text | db.accel)*
        }
    }
    [ db:refname [ "hardware" ] db:refpurpose [ ] ]
    div {
      local.hardware.attributes = empty
      hardware.role.attribute = attribute role { text }
      hardware.attlist =
        hardware.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.hardware.attributes
      db.hardware =
        element db:hardware { hardware.attlist, docbook.text }
    }
    [ db:refname [ "keycap" ] db:refpurpose [ ] ]
    div {
      local.keycap.attributes = empty
      ctrl:other-attribute [
        name = "keycap.function.attrib"
        enum-name = "keycap.function-enum.attribute"
        other-name = "keycap.function-other.attributes"
      ]
      keycap.function-enum.attribute =
        attribute function {
          "alt"
          | "backspace"
          | "command"
          | "control"
          | "delete"
          | "down"
          | "end"
          | "enter"
          | "escape"
          | "home"
          | "insert"
          | "left"
          | "meta"
          | "option"
          | "pagedown"
          | "pageup"
          | "right"
          | "shift"
          | "space"
          | "tab"
          | "up"
        }?
      keycap.function-other.attributes =
        attribute function { "other" }?,
        attribute otherfunction { text }
      keycap.function.attrib =
        keycap.function-enum.attribute
        | keycap.function-other.attributes
      keycap.role.attribute = attribute role { text }
      keycap.attlist =
        keycap.role.attribute?
        & common.attributes
        & common.linking.attributes
        & keycap.function.attrib
        & local.keycap.attributes
      db.keycap = element db:keycap { keycap.attlist, docbook.text }
    }
    [ db:refname [ "keycode" ] db:refpurpose [ ] ]
    div {
      local.keycode.attributes = empty
      keycode.role.attribute = attribute role { text }
      keycode.attlist =
        keycode.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.keycode.attributes
      db.keycode = element db:keycode { keycode.attlist, docbook.text }
    }
    [ db:refname [ "keycombo" ] db:refpurpose [ ] ]
    div {
      local.keycombo.attributes = empty
      ctrl:other-attribute [
        name = "keycombo.action.attrib"
        enum-name = "keycombo.action-enum.attribute"
        other-name = "keycombo.action-other.attributes"
      ]
      keycombo.action-enum.attribute =
        attribute action {
          "click" | "double-click" | "press" | "seq" | "simul"
        }?
      keycombo.action-other.attributes =
        attribute action { "other" }?,
        attribute otheraction { text }
      keycombo.action.attrib =
        keycombo.action-enum.attribute
        | keycombo.action-other.attributes
      keycombo.role.attribute = attribute role { text }
      keycombo.attlist =
        keycombo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & keycombo.action.attrib
        & local.keycombo.attributes
      db.keycombo =
        element db:keycombo {
          keycombo.attlist,
          (db.keycap | db.keycombo | db.keysym | db.mousebutton)+
        }
    }
    [ db:refname [ "keysym" ] db:refpurpose [ ] ]
    div {
      local.keysym.attributes = empty
      keysym.role.attribute = attribute role { text }
      keysym.attlist =
        keysym.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.keysym.attributes
      db.keysym = element db:keysym { keysym.attlist, docbook.text }
    }
    [ db:refname [ "lineannotation" ] db:refpurpose [ ] ]
    div {
      local.lineannotation.attributes = empty
      lineannotation.role.attribute = attribute role { text }
      lineannotation.attlist =
        lineannotation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.lineannotation.attributes
      db.lineannotation =
        element db:lineannotation { lineannotation.attlist, inlines* }
    }
    [ db:refname [ "literal" ] db:refpurpose [ ] ]
    div {
      local.literal.attributes = empty
      literal.role.attribute = attribute role { text }
      literal.attlist =
        literal.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.literal.attributes
      db.literal = element db:literal { literal.attlist, inlines* }
    }
    [ db:refname [ "code" ] db:refpurpose [ ] ]
    div {
      local.code.attributes = empty
      code.language.attribute = attribute language { text }
      code.role.attribute = attribute role { text }
      code.attlist =
        code.role.attribute?
        & common.attributes
        & common.linking.attributes
        & code.language.attribute?
        & local.code.attributes
      db.code = element db:code { code.attlist, inlines* }
    }
    [ db:refname [ "constant" ] db:refpurpose [ ] ]
    div {
      local.constant.attributes = empty
      constant.class.attribute = attribute class { "limit" }
      constant.role.attribute = attribute role { text }
      constant.attlist =
        constant.role.attribute?
        & common.attributes
        & common.linking.attributes
        & constant.class.attribute?
        & local.constant.attributes
      db.constant =
        element db:constant { constant.attlist, docbook.text }
    }
    [ db:refname [ "varname" ] db:refpurpose [ ] ]
    div {
      local.varname.attributes = empty
      varname.role.attribute = attribute role { text }
      varname.attlist =
        varname.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.varname.attributes
      db.varname = element db:varname { varname.attlist, docbook.text }
    }
    [ db:refname [ "markup" ] db:refpurpose [ ] ]
    div {
      local.markup.attributes = empty
      markup.role.attribute = attribute role { text }
      markup.attlist =
        markup.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.markup.attributes
      db.markup = element db:markup { markup.attlist, docbook.text }
    }
    [ db:refname [ "menuchoice" ] db:refpurpose [ ] ]
    div {
      local.menuchoice.attributes = empty
      menuchoice.role.attribute = attribute role { text }
      menuchoice.attlist =
        menuchoice.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.menuchoice.attributes
      db.menuchoice =
        element db:menuchoice {
          menuchoice.attlist,
          db.shortcut?,
          (db.guibutton
           | db.guiicon
           | db.guilabel
           | db.guimenu
           | db.guimenuitem
           | db.guisubmenu)+
        }
    }
    [ db:refname [ "shortcut" ] db:refpurpose [ ] ]
    div {
      local.shortcut.attributes = empty
      shortcut.action.attrib = keycombo.action.attrib
      shortcut.role.attribute = attribute role { text }
      shortcut.attlist =
        shortcut.role.attribute?
        & common.attributes
        & common.linking.attributes
        & shortcut.action.attrib
        & local.shortcut.attributes
      db.shortcut =
        element db:shortcut {
          shortcut.attlist,
          (db.keycap | db.keycombo | db.keysym | db.mousebutton)+
        }
    }
    [ db:refname [ "mousebutton" ] db:refpurpose [ ] ]
    div {
      local.mousebutton.attributes = empty
      mousebutton.role.attribute = attribute role { text }
      mousebutton.attlist =
        mousebutton.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.mousebutton.attributes
      db.mousebutton =
        element db:mousebutton { mousebutton.attlist, docbook.text }
    }
    [ db:refname [ "option" ] db:refpurpose [ ] ]
    div {
      local.option.attributes = empty
      option.role.attribute = attribute role { text }
      option.attlist =
        option.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.option.attributes
      db.option = element db:option { option.attlist, docbook.text }
    }
    [ db:refname [ "optional" ] db:refpurpose [ ] ]
    div {
      local.optional.attributes = empty
      optional.role.attribute = attribute role { text }
      optional.attlist =
        optional.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.optional.attributes
      db.optional = element db:optional { optional.attlist, inlines* }
    }
    [ db:refname [ "parameter" ] db:refpurpose [ ] ]
    div {
      local.parameter.attributes = empty
      parameter.class.attribute =
        attribute class { "command" | "function" | "option" }
      parameter.role.attribute = attribute role { text }
      parameter.attlist =
        parameter.role.attribute?
        & common.attributes
        & common.linking.attributes
        & parameter.class.attribute?
        & local.parameter.attributes
      db.parameter =
        element db:parameter { parameter.attlist, docbook.text }
    }
    prompt.inlines = docbook.text | db.co
    [ db:refname [ "prompt" ] db:refpurpose [ ] ]
    div {
      local.prompt.attributes = empty
      prompt.role.attribute = attribute role { text }
      prompt.attlist =
        prompt.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.prompt.attributes
      db.prompt = element db:prompt { prompt.attlist, prompt.inlines* }
    }
    replaceable.inlines = docbook.text | db.co
    [ db:refname [ "replaceable" ] db:refpurpose [ ] ]
    div {
      local.replaceable.attributes = empty
      replaceable.class.attribute =
        attribute class {
          "command" | "function" | "option" | "parameter"
        }
      replaceable.role.attribute = attribute role { text }
      replaceable.attlist =
        replaceable.role.attribute?
        & common.attributes
        & common.linking.attributes
        & replaceable.class.attribute?
        & local.replaceable.attributes
      db.replaceable =
        element db:replaceable {
          replaceable.attlist, replaceable.inlines*
        }
    }
    [ db:refname [ "returnvalue" ] db:refpurpose [ ] ]
    div {
      local.returnvalue.attributes = empty
      returnvalue.role.attribute = attribute role { text }
      returnvalue.attlist =
        returnvalue.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.returnvalue.attributes
      db.returnvalue =
        element db:returnvalue { returnvalue.attlist, docbook.text }
    }
    [ db:refname [ "tag" ] db:refpurpose [ ] ]
    div {
      local.tag.attributes = empty
      tag.class.attribute =
        attribute class {
          "attribute"
          | "attvalue"
          | "element"
          | "emptytag"
          | "endtag"
          | "genentity"
          | "numcharref"
          | "paramentity"
          | "pi"
          | "sgmlcomment"
          | "starttag"
          | "xmlpi"
        }?
      tag.role.attribute = attribute role { text }
      tag.attlist =
        tag.role.attribute?
        & common.attributes
        & common.linking.attributes
        & tag.class.attribute
        & local.tag.attributes
      db.tag = element db:tag { tag.attlist, docbook.text }
    }
    [ db:refname [ "symbol" ] db:refpurpose [ ] ]
    div {
      local.symbol.attributes = empty
      symbol.class.attribute = attribute class { "limit" }?
      symbol.role.attribute = attribute role { text }
      symbol.attlist =
        symbol.role.attribute?
        & common.attributes
        & common.linking.attributes
        & symbol.class.attribute
        & local.symbol.attributes
      db.symbol = element db:symbol { symbol.attlist, docbook.text }
    }
    systemitem.inlines = docbook.text | db.co
    [ db:refname [ "systemitem" ] db:refpurpose [ ] ]
    div {
      local.systemitem.attributes = empty
      systemitem.class.attribute =
        attribute class {
          "daemon"
          | "domainname"
          | "etheraddress"
          | "event"
          | "eventhandler"
          | "filesystem"
          | "fqdomainname"
          | "groupname"
          | "ipaddress"
          | "library"
          | "macro"
          | "netmask"
          | "newsgroup"
          | "osname"
          | "process"
          | "resource"
          | "server"
          | "service"
          | "systemname"
          | "username"
        }
      systemitem.role.attribute = attribute role { text }
      systemitem.attlist =
        systemitem.role.attribute?
        & common.attributes
        & common.linking.attributes
        & systemitem.class.attribute?
        & local.systemitem.attributes
      db.systemitem =
        element db:systemitem {
          systemitem.attlist, systemitem.inlines*
        }
    }
    [ db:refname [ "uri" ] db:refpurpose [ ] ]
    div {
      local.uri.attributes = empty
      uri.type.attribute = attribute type { text }?
      uri.role.attribute = attribute role { text }
      uri.attlist =
        uri.role.attribute?
        & common.attributes
        & common.linking.attributes
        & uri.type.attribute
        & local.uri.attributes
      db.uri = element db:uri { uri.attlist, docbook.text }
    }
    [ db:refname [ "token" ] db:refpurpose [ ] ]
    div {
      local.token.attributes = empty
      token.role.attribute = attribute role { text }
      token.attlist =
        token.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.token.attributes
      db.token = element db:token { token.attlist, docbook.text }
    }
    [ db:refname [ "type" ] db:refpurpose [ ] ]
    div {
      local.type.attributes = empty
      type.role.attribute = attribute role { text }
      type.attlist =
        type.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.type.attributes
      db.type = element db:type { type.attlist, docbook.text }
    }
    userinput.inlines = inlines | db.co
    [ db:refname [ "userinput" ] db:refpurpose [ ] ]
    div {
      local.userinput.attributes = empty
      userinput.role.attribute = attribute role { text }
      userinput.attlist =
        userinput.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.userinput.attributes
      db.userinput =
        element db:userinput { userinput.attlist, userinput.inlines* }
    }
    [ db:refname [ "abbrev" ] db:refpurpose [ ] ]
    div {
      local.abbrev.attributes = empty
      abbrev.role.attribute = attribute role { text }
      abbrev.attlist =
        abbrev.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.abbrev.attributes
      db.abbrev =
        element db:abbrev {
          abbrev.attlist,
          (docbook.text | db.superscript | db.subscript | db.trademark)*
        }
    }
    [ db:refname [ "acronym" ] db:refpurpose [ ] ]
    div {
      local.acronym.attributes = empty
      acronym.role.attribute = attribute role { text }
      acronym.attlist =
        acronym.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.acronym.attributes
      db.acronym =
        element db:acronym {
          acronym.attlist,
          (docbook.text | db.superscript | db.subscript | db.trademark)*
        }
    }
    [ db:refname [ "citation" ] db:refpurpose [ ] ]
    div {
      local.citation.attributes = empty
      citation.role.attribute = attribute role { text }
      citation.attlist =
        citation.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.citation.attributes
      db.citation =
        element db:citation { citation.attlist, docbook.text }
    }
    [ db:refname [ "citerefentry" ] db:refpurpose [ ] ]
    div {
      local.citerefentry.attributes = empty
      citerefentry.role.attribute = attribute role { text }
      citerefentry.attlist =
        citerefentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.citerefentry.attributes
      db.citerefentry =
        element db:citerefentry {
          citerefentry.attlist, db.refentrytitle, db.manvolnum?
        }
    }
    [ db:refname [ "refentrytitle" ] db:refpurpose [ ] ]
    div {
      local.refentrytitle.attributes = empty
      refentrytitle.role.attribute = attribute role { text }
      refentrytitle.attlist =
        refentrytitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.refentrytitle.attributes
      db.refentrytitle =
        element db:refentrytitle { refentrytitle.attlist, inlines* }
    }
    [ db:refname [ "manvolnum" ] db:refpurpose [ ] ]
    div {
      local.manvolnum.attributes = empty
      manvolnum.role.attribute = attribute role { text }
      manvolnum.attlist =
        manvolnum.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.manvolnum.attributes
      db.manvolnum =
        element db:manvolnum { manvolnum.attlist, docbook.text }
    }
    [ db:refname [ "citetitle" ] db:refpurpose [ ] ]
    div {
      local.citetitle.attributes = empty
      citetitle.pubwork.attribute =
        attribute pubwork {
          "article"
          | "bbs"
          | "book"
          | "cdrom"
          | "chapter"
          | "dvd"
          | "emailmessage"
          | "gopher"
          | "journal"
          | "manuscript"
          | "newsposting"
          | "part"
          | "refentry"
          | "section"
          | "series"
          | "set"
          | "webpage"
          | "wiki"
        }
      citetitle.role.attribute = attribute role { text }
      citetitle.attlist =
        citetitle.role.attribute?
        & common.attributes
        & common.linking.attributes
        & citetitle.pubwork.attribute?
        & local.citetitle.attributes
      db.citetitle =
        element db:citetitle { citetitle.attlist, inlines* }
    }
    [ db:refname [ "emphasis" ] db:refpurpose [ ] ]
    div {
      local.emphasis.attributes = empty
      emphasis.role.attribute = attribute role { text }
      emphasis.attlist =
        emphasis.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.emphasis.attributes
      db.emphasis = element db:emphasis { emphasis.attlist, inlines* }
    }
    [ db:refname [ "foreignphrase" ] db:refpurpose [ ] ]
    div {
      local.foreignphrase.attributes = empty
      foreignphrase.role.attribute = attribute role { text }
      foreignphrase.attlist =
        foreignphrase.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.foreignphrase.attributes
      db.foreignphrase =
        element db:foreignphrase {
          foreignphrase.attlist, (text | general.inlines)*
        }
    }
    [ db:refname [ "phrase" ] db:refpurpose [ ] ]
    div {
      local.phrase.attributes = empty
      phrase.role.attribute = attribute role { text }
      phrase.attlist =
        phrase.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.phrase.attributes
      db.phrase = element db:phrase { phrase.attlist, inlines* }
    }
    [ db:refname [ "quote" ] db:refpurpose [ ] ]
    div {
      local.quote.attributes = empty
      quote.role.attribute = attribute role { text }
      quote.attlist =
        quote.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.quote.attributes
      db.quote = element db:quote { quote.attlist, inlines* }
    }
    [ db:refname [ "subscript" ] db:refpurpose [ ] ]
    div {
      local.subscript.attributes = empty
      subscript.role.attribute = attribute role { text }
      subscript.attlist =
        subscript.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.subscript.attributes
      db.subscript =
        element db:subscript { subscript.attlist, docbook.text }
    }
    [ db:refname [ "superscript" ] db:refpurpose [ ] ]
    div {
      local.superscript.attributes = empty
      superscript.role.attribute = attribute role { text }
      superscript.attlist =
        superscript.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.superscript.attributes
      db.superscript =
        element db:superscript { superscript.attlist, docbook.text }
    }
    [ db:refname [ "trademark" ] db:refpurpose [ ] ]
    div {
      local.trademark.attributes = empty
      trademark.class.attribute =
        attribute class {
          "copyright" | "registered" | "service" | "trade"
        }
      trademark.role.attribute = attribute role { text }
      trademark.attlist =
        trademark.role.attribute?
        & common.attributes
        & common.linking.attributes
        & trademark.class.attribute?
        & local.trademark.attributes
      db.trademark =
        element db:trademark { trademark.attlist, docbook.text }
    }
    [ db:refname [ "wordasword" ] db:refpurpose [ ] ]
    div {
      local.wordasword.attributes = empty
      wordasword.role.attribute = attribute role { text }
      wordasword.attlist =
        wordasword.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.wordasword.attributes
      db.wordasword =
        element db:wordasword { wordasword.attlist, docbook.text }
    }
    [ db:refname [ "footnoteref" ] db:refpurpose [ ] ]
    div {
      local.footnoteref.attributes = empty
      footnoteref.role.attribute = attribute role { text }
      footnoteref.attlist =
        footnoteref.role.attribute?
        & common.attributes
        & linkend.attribute
        & attribute label { text }?
        & local.footnoteref.attributes
      db.footnoteref =
        [
          s:rule [
            context = "db:footnoteref"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@linkend]) = 'footnote' and namespace-uri(//*[@id=current()/@linkend]) = 'http://docbook.org/docbook-ng'"
              "@linkend on footnoteref must point to a footnote."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:footnoteref { footnoteref.attlist, empty }
    }
    [ db:refname [ "xref" ] db:refpurpose [ ] ]
    div {
      local.xref.attributes = empty
      xref.role.attribute = attribute role { text }
      xref.attlist =
        xref.role.attribute?
        & common.attributes
        & common.linking.attributes.req
        & attribute xrefstyle { text }?
        & attribute endterm { xsd:IDREF }?
        & local.xref.attributes
      db.xref = element db:xref { xref.attlist, empty }
    }
    [ db:refname [ "anchor" ] db:refpurpose [ ] ]
    div {
      local.anchor.attributes = empty
      anchor.role.attribute = attribute role { text }
      anchor.attlist =
        anchor.role.attribute?
        & common.attributes.idreq
        & local.anchor.attributes
      db.anchor = element db:anchor { anchor.attlist, empty }
    }
    glossary.inlines = db.firstterm | db.glossterm
    baseform.attribute = attribute baseform { text }?
    [ db:refname [ "glosslist" ] db:refpurpose [ ] ]
    div {
      local.glosslist.attributes = empty
      glosslist.role.attribute = attribute role { text }
      glosslist.attlist =
        glosslist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.glosslist.attributes
      glosslist.info = docbook.info.titleonly
      db.glosslist =
        element db:glosslist {
          glosslist.attlist, glosslist.info?, blocks*, db.glossentry+
        }
    }
    [ db:refname [ "glossentry" ] db:refpurpose [ ] ]
    div {
      local.glossentry.attributes = empty
      glossentry.role.attribute = attribute role { text }
      glossentry.attlist =
        glossentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute sortas { text }?
        & local.glossentry.attributes
      db.glossentry =
        element db:glossentry {
          glossentry.attlist,
          db.glossterm,
          db.acronym?,
          db.abbrev?,
          db.indexterm*,
          (db.glosssee | db.glossdef+)
        }
    }
    [ db:refname [ "glossdef" ] db:refpurpose [ ] ]
    div {
      local.glossdef.attributes = empty
      glossdef.role.attribute = attribute role { text }
      glossdef.attlist =
        glossdef.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute subject { text }?
        & local.glossdef.attributes
      db.glossdef =
        element db:glossdef {
          glossdef.attlist, blocks+, db.glossseealso*
        }
    }
    [ db:refname [ "glosssee" ] db:refpurpose [ ] ]
    div {
      local.glosssee.attributes = empty
      glosssee.role.attribute = attribute role { text }
      glosssee.attlist =
        glosssee.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute otherterm { xsd:IDREF }?
        & local.glosssee.attributes
      db.glosssee =
        [
          s:rule [
            context = "db:glosssee[@otherterm]"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@otherterm]) = 'glossentry' and namespace-uri(//*[@id=current()/@otherterm]) = 'http://docbook.org/docbook-ng'"
              "@otherterm on glosssee must point to a glossentry."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:glosssee { glosssee.attlist, inlines* }
    }
    [ db:refname [ "glossseealso" ] db:refpurpose [ ] ]
    div {
      local.glossseealso.attributes = empty
      glossseealso.role.attribute = attribute role { text }
      glossseealso.attlist =
        glossseealso.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute otherterm { xsd:IDREF }?
        & local.glossseealso.attributes
      db.glossseealso =
        [
          s:rule [
            context = "db:glossseealso[@otherterm]"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@otherterm]) = 'glossentry' and namespace-uri(//*[@id=current()/@otherterm]) = 'http://docbook.org/docbook-ng'"
              "@otherterm on glossseealso must point to a glossentry."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:glossseealso { glossseealso.attlist, inlines* }
    }
    [ db:refname [ "firstterm" ] db:refpurpose [ ] ]
    div {
      local.firstterm.attributes = empty
      firstterm.role.attribute = attribute role { text }
      firstterm.attlist =
        firstterm.role.attribute?
        & common.attributes
        & common.linking.attributes
        & baseform.attribute
        & local.firstterm.attributes
      db.firstterm =
        [
          s:rule [
            context = "db:firstterm[@linkend]"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@linkend]) = 'glossentry' and namespace-uri(//*[@id=current()/@linkend]) = 'http://docbook.org/docbook-ng'"
              "@linkend on firstterm must point to a glossentry."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:firstterm { firstterm.attlist, inlines* }
    }
    [ db:refname [ "glossterm" ] db:refpurpose [ ] ]
    div {
      local.glossterm.attributes = empty
      glossterm.role.attribute = attribute role { text }
      glossterm.attlist =
        glossterm.role.attribute?
        & common.attributes
        & common.linking.attributes
        & baseform.attribute
        & local.glossterm.attributes
      db.glossterm =
        [
          s:rule [
            context = "db:glossterm[@linkend]"
            "\x{a}" ~
            "               "
            s:assert [
              test =
                "local-name(//*[@id=current()/@linkend]) = 'glossentry' and namespace-uri(//*[@id=current()/@linkend]) = 'http://docbook.org/docbook-ng'"
              "@linkend on glossterm must point to a glossentry."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:glossterm { glossterm.attlist, inlines* }
    }
    [ db:refname [ "glossary" ] db:refpurpose [ ] ]
    div {
      local.glossary.attributes = empty
      glossary.status.attribute = status.attribute
      glossary.role.attribute = attribute role { text }
      glossary.attlist =
        glossary.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & glossary.status.attribute?
        & local.glossary.attributes
      glossary.info = docbook.info
      db.glossary =
        [
          s:rule [
            context = "/db:glossary"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:glossary {
          glossary.attlist,
          glossary.info,
          blocks*,
          (db.glossdiv+ | db.glossentry+),
          db.bibliography?
        }
    }
    [ db:refname [ "glossdiv" ] db:refpurpose [ ] ]
    div {
      local.glossdiv.attributes = empty
      glossdiv.status.attribute = status.attribute
      glossdiv.role.attribute = attribute role { text }
      glossdiv.attlist =
        glossdiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & glossdiv.status.attribute?
        & local.glossdiv.attributes
      glossdiv.info = docbook.info.titlereq
      db.glossdiv =
        element db:glossdiv {
          glossdiv.attlist, glossdiv.info, blocks*, db.glossentry+
        }
    }
    relation.attribute = attribute relation { text }
    [ db:refname [ "biblioentry" ] db:refpurpose [ ] ]
    div {
      local.biblioentry.attributes = empty
      biblioentry.role.attribute = attribute role { text }
      biblioentry.attlist =
        biblioentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.biblioentry.attributes
      db.biblioentry =
        element db:biblioentry {
          biblioentry.attlist, bibliographic.elements+
        }
    }
    [ db:refname [ "bibliomixed" ] db:refpurpose [ ] ]
    div {
      local.bibliomixed.attributes = empty
      bibliomixed.role.attribute = attribute role { text }
      bibliomixed.attlist =
        bibliomixed.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.bibliomixed.attributes
      db.bibliomixed =
        element db:bibliomixed {
          bibliomixed.attlist, (text | bibliographic.elements)*
        }
    }
    [ db:refname [ "biblioset" ] db:refpurpose [ ] ]
    div {
      local.biblioset.attributes = empty
      biblioset.relation.attrib = relation.attribute
      biblioset.role.attribute = attribute role { text }
      biblioset.attlist =
        biblioset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & biblioset.relation.attrib?
        & local.biblioset.attributes
      db.biblioset =
        element db:biblioset {
          biblioset.attlist, bibliographic.elements+
        }
    }
    [ db:refname [ "bibliomset" ] db:refpurpose [ ] ]
    div {
      local.bibliomset.attributes = empty
      bibliomset.relation.attrib = relation.attribute
      bibliomset.role.attribute = attribute role { text }
      bibliomset.attlist =
        bibliomset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & bibliomset.relation.attrib?
        & local.bibliomset.attributes
      db.bibliomset =
        element db:bibliomset {
          bibliomset.attlist, (docbook.text | bibliographic.elements)*
        }
    }
    [ db:refname [ "bibliomisc" ] db:refpurpose [ ] ]
    div {
      local.bibliomisc.attributes = empty
      bibliomisc.role.attribute = attribute role { text }
      bibliomisc.attlist =
        bibliomisc.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.bibliomisc.attributes
      db.bibliomisc =
        element db:bibliomisc { bibliomisc.attlist, docbook.text }
    }
    [ db:refname [ "bibliography" ] db:refpurpose [ ] ]
    div {
      local.bibliography.attributes = empty
      bibliography.status.attrib = status.attribute
      bibliography.role.attribute = attribute role { text }
      bibliography.attlist =
        bibliography.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & bibliography.status.attrib?
        & local.bibliography.attributes
      bibliography.info = docbook.info
      db.bibliography =
        [
          s:rule [
            context = "/db:bibliography"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:bibliography {
          bibliography.attlist,
          bibliography.info,
          blocks*,
          (db.bibliodiv+ | (db.biblioentry | db.bibliomixed)+)
        }
    }
    [ db:refname [ "bibliodiv" ] db:refpurpose [ ] ]
    div {
      local.bibliodiv.attributes = empty
      bibliodiv.status.attrib = status.attribute
      bibliodiv.role.attribute = attribute role { text }
      bibliodiv.attlist =
        bibliodiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & bibliodiv.status.attrib?
        & local.bibliodiv.attributes
      bibliodiv.info = docbook.info.titlereq
      db.bibliodiv =
        element db:bibliodiv {
          bibliodiv.attlist,
          bibliodiv.info,
          blocks*,
          (db.biblioentry | db.bibliomixed)+
        }
    }
    [ db:refname [ "bibliolist" ] db:refpurpose [ ] ]
    div {
      local.bibliolist.attributes = empty
      bibliolist.role.attribute = attribute role { text }
      bibliolist.attlist =
        bibliolist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.bibliolist.attributes
      bibliolist.info = docbook.info.titleonly
      db.bibliolist =
        element db:bibliolist {
          bibliolist.attlist,
          bibliolist.info?,
          blocks*,
          (db.biblioentry | db.bibliomixed)+
        }
    }
    significance.attribute =
      attribute significance { "normal" | "preferred" }
    zone.attribute = attribute zone { xsd:IDREFS }
    pagenum.attribute = attribute pagenum { text }
    scope.attribute = attribute scope { "all" | "global" | "local" }
    sortas.attribute = attribute sortas { text }
    [ db:refname [ "itermset" ] db:refpurpose [ ] ]
    div {
      local.itermset.attributes = empty
      itermset.role.attribute = attribute role { text }
      itermset.attlist =
        itermset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.itermset.attributes
      db.itermset =
        element db:itermset { itermset.attlist, indexterm.singular+ }
    }
    indexterm.contentmodel =
      db.primary?,
      ((db.secondary,
        ((db.tertiary, (db.see | db.seealso+)?)
         | db.see
         | db.seealso+)?)
       | db.see
       | db.seealso+)?
    [ db:refname [ "indexterm" ] db:refpurpose [ ] ]
    div {
      local.indexterm.singular.attributes = empty
      indexterm.singular.role.attribute = attribute role { text }
      indexterm.singular.attlist =
        indexterm.singular.role.attribute?
        & common.attributes
        & common.linking.attributes
        & significance.attribute?
        & zone.attribute?
        & pagenum.attribute?
        & scope.attribute?
        & attribute class { "singular" }?
        & local.indexterm.singular.attributes
      indexterm.singular =
        element db:indexterm {
          indexterm.singular.attlist, indexterm.contentmodel
        }
    }
    [ db:refname [ "indexterm" ] db:refpurpose [ ] ]
    div {
      local.indexterm.startofrange.attributes = empty
      indexterm.startofrange.role.attribute = attribute role { text }
      indexterm.startofrange.attlist =
        indexterm.startofrange.role.attribute?
        & common.attributes
        & common.linking.attributes
        & significance.attribute?
        & zone.attribute?
        & pagenum.attribute?
        & scope.attribute?
        & attribute class { "startofrange" }
        & local.indexterm.startofrange.attributes
      indexterm.startofrange =
        element db:indexterm {
          indexterm.startofrange.attlist, indexterm.contentmodel
        }
    }
    [ db:refname [ "indexterm" ] db:refpurpose [ ] ]
    div {
      local.indexterm.endofrange.attributes = empty
      indexterm.endofrange.role.attribute = attribute role { text }
      indexterm.endofrange.attlist =
        indexterm.endofrange.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute class { "endofrange" }
        & attribute startref { xsd:IDREF }
        & local.indexterm.endofrange.attributes
      indexterm.endofrange =
        element db:indexterm { indexterm.endofrange.attlist, empty }
    }
    [ db:refname [ "indexterm" ] db:refpurpose [ ] ]
    div {
      db.indexterm =
        indexterm.singular
        | indexterm.startofrange
        | indexterm.endofrange
    }
    [ db:refname [ "primary" ] db:refpurpose [ ] ]
    div {
      local.primary.attributes = empty
      primary.role.attribute = attribute role { text }
      primary.attlist =
        primary.role.attribute?
        & common.attributes
        & common.linking.attributes
        & sortas.attribute?
        & local.primary.attributes
      db.primary = element db:primary { primary.attlist, inlines* }
    }
    [ db:refname [ "secondary" ] db:refpurpose [ ] ]
    div {
      local.secondary.attributes = empty
      secondary.role.attribute = attribute role { text }
      secondary.attlist =
        secondary.role.attribute?
        & common.attributes
        & common.linking.attributes
        & sortas.attribute?
        & local.secondary.attributes
      db.secondary =
        element db:secondary { secondary.attlist, inlines* }
    }
    [ db:refname [ "tertiary" ] db:refpurpose [ ] ]
    div {
      local.tertiary.attributes = empty
      tertiary.role.attribute = attribute role { text }
      tertiary.attlist =
        tertiary.role.attribute?
        & common.attributes
        & common.linking.attributes
        & sortas.attribute?
        & local.tertiary.attributes
      db.tertiary = element db:tertiary { tertiary.attlist, inlines* }
    }
    [ db:refname [ "see" ] db:refpurpose [ ] ]
    div {
      local.see.attributes = empty
      see.role.attribute = attribute role { text }
      see.attlist =
        see.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.see.attributes
      db.see = element db:see { see.attlist, inlines* }
    }
    [ db:refname [ "seealso" ] db:refpurpose [ ] ]
    div {
      local.seealso.attributes = empty
      seealso.role.attribute = attribute role { text }
      seealso.attlist =
        seealso.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.seealso.attributes
      db.seealso = element db:seealso { seealso.attlist, inlines* }
    }
    [ db:refname [ "index" ] db:refpurpose [ ] ]
    div {
      local.index.attributes = empty
      index.status.attribute = status.attribute
      index.role.attribute = attribute role { text }
      index.attlist =
        index.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & index.status.attribute?
        & local.index.attributes
      index.info = docbook.info
      db.index =
        [
          s:rule [
            context = "/db:index"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:index {
          index.attlist,
          index.info,
          blocks*,
          (db.indexdiv* | db.indexentry* | db.segmentedlist)
        }
    }
    [ db:refname [ "setindex" ] db:refpurpose [ ] ]
    div {
      local.setindex.attributes = empty
      setindex.status.attribute = status.attribute
      setindex.role.attribute = attribute role { text }
      setindex.attlist =
        setindex.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & setindex.status.attribute?
        & local.setindex.attributes
      setindex.info = docbook.info
      db.setindex =
        [
          s:rule [
            context = "/db:setindex"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:setindex {
          setindex.attlist,
          setindex.info,
          blocks*,
          (db.indexdiv* | db.indexentry*)
        }
    }
    [ db:refname [ "indexdiv" ] db:refpurpose [ ] ]
    div {
      local.indexdiv.attributes = empty
      indexdiv.status.attribute = status.attribute
      indexdiv.role.attribute = attribute role { text }
      indexdiv.attlist =
        indexdiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & label.attribute?
        & indexdiv.status.attribute?
        & local.indexdiv.attributes
      indexdiv.info = docbook.info.titlereq
      db.indexdiv =
        element db:indexdiv {
          indexdiv.attlist,
          indexdiv.info,
          blocks*,
          (db.indexentry+ | db.segmentedlist)
        }
    }
    [ db:refname [ "indexentry" ] db:refpurpose [ ] ]
    div {
      local.indexentry.attributes = empty
      indexentry.role.attribute = attribute role { text }
      indexentry.attlist =
        indexentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.indexentry.attributes
      db.indexentry =
        element db:indexentry {
          indexentry.attlist,
          db.primaryie,
          (db.seeie | db.seealsoie)*,
          (db.secondaryie, (db.seeie | db.seealsoie | db.tertiaryie)*)*
        }
    }
    [ db:refname [ "primaryie" ] db:refpurpose [ ] ]
    div {
      local.primaryie.attributes = empty
      primaryie.role.attribute = attribute role { text }
      primaryie.attlist =
        primaryie.role.attribute?
        & common.attributes
        & linkends.attribute?
        & local.primaryie.attributes
      db.primaryie =
        element db:primaryie { primaryie.attlist, inlines* }
    }
    [ db:refname [ "secondaryie" ] db:refpurpose [ ] ]
    div {
      local.secondaryie.attributes = empty
      secondaryie.role.attribute = attribute role { text }
      secondaryie.attlist =
        secondaryie.role.attribute?
        & common.attributes
        & linkends.attribute?
        & local.secondaryie.attributes
      db.secondaryie =
        element db:secondaryie { secondaryie.attlist, inlines* }
    }
    [ db:refname [ "tertiaryie" ] db:refpurpose [ ] ]
    div {
      local.tertiaryie.attributes = empty
      tertiaryie.role.attribute = attribute role { text }
      tertiaryie.attlist =
        tertiaryie.role.attribute?
        & common.attributes
        & linkends.attribute?
        & local.tertiaryie.attributes
      db.tertiaryie =
        element db:tertiaryie { tertiaryie.attlist, inlines* }
    }
    [ db:refname [ "seeie" ] db:refpurpose [ ] ]
    div {
      local.seeie.attributes = empty
      seeie.role.attribute = attribute role { text }
      seeie.attlist =
        seeie.role.attribute?
        & common.attributes
        & linkend.attribute?
        & local.seeie.attributes
      db.seeie = element db:seeie { seeie.attlist, inlines* }
    }
    [ db:refname [ "seealsoie" ] db:refpurpose [ ] ]
    div {
      local.seealsoie.attributes = empty
      seealsoie.role.attribute = attribute role { text }
      seealsoie.attlist =
        seealsoie.role.attribute?
        & common.attributes
        & linkends.attribute?
        & local.seealsoie.attributes
      db.seealsoie =
        element db:seealsoie { seealsoie.attlist, inlines* }
    }
    [ db:refname [ "toc" ] db:refpurpose [ ] ]
    div {
      local.toc.attributes = empty
      toc.role.attribute = attribute role { text }
      toc.attlist =
        toc.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.toc.attributes
      toc.info = docbook.info.titleonly
      db.toc =
        [
          s:rule [
            context = "/db:toc"
            "\x{a}" ~
            "               "
            s:assert [
              test = "@version"
              "The root element must have a version attribute."
            ]
            "\x{a}" ~
            "\x{a}" ~
            "\x{a}" ~
            "            "
          ]
        ]
        element db:toc {
          toc.attlist, toc.info, blocks*, (db.tocdiv | db.tocentry)*
        }
    }
    [ db:refname [ "tocdiv" ] db:refpurpose [ ] ]
    div {
      local.tocdiv.attributes = empty
      tocdiv.role.attribute = attribute role { text }
      tocdiv.attlist =
        tocdiv.role.attribute?
        & common.attributes
        & attribute pagenum { text }?
        & linkend.attribute?
        & local.tocdiv.attributes
      tocdiv.info = docbook.info
      db.tocdiv =
        element db:tocdiv {
          tocdiv.attlist,
          tocdiv.info,
          blocks*,
          (db.tocdiv | db.tocentry)+
        }
    }
    [ db:refname [ "tocentry" ] db:refpurpose [ ] ]
    div {
      local.tocentry.attributes = empty
      tocentry.role.attribute = attribute role { text }
      tocentry.attlist =
        tocentry.role.attribute?
        & common.attributes
        & attribute pagenum { text }?
        & linkend.attribute?
        & local.tocentry.attributes
      db.tocentry = element db:tocentry { tocentry.attlist, inlines* }
    }
    task.info = docbook.info.titleonly
    [ db:refname [ "task" ] db:refpurpose [ ] ]
    div {
      local.task.attributes = empty
      task.role.attribute = attribute role { text }
      task.attlist =
        task.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.task.attributes
      db.task =
        element db:task {
          task.attlist,
          task.info,
          db.tasksummary?,
          db.taskprerequisites?,
          db.procedure,
          db.example*,
          db.taskrelated?
        }
    }
    [ db:refname [ "tasksummary" ] db:refpurpose [ ] ]
    div {
      local.tasksummary.attributes = empty
      tasksummary.role.attribute = attribute role { text }
      tasksummary.attlist =
        tasksummary.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.tasksummary.attributes
      tasksummary.info = docbook.info.titleonly
      db.tasksummary =
        element db:tasksummary {
          tasksummary.attlist, tasksummary.info, blocks+
        }
    }
    [ db:refname [ "taskprerequisites" ] db:refpurpose [ ] ]
    div {
      local.taskprerequisites.attributes = empty
      taskprerequisites.role.attribute = attribute role { text }
      taskprerequisites.attlist =
        taskprerequisites.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.taskprerequisites.attributes
      taskprerequisites.info = docbook.info.titleonly
      db.taskprerequisites =
        element db:taskprerequisites {
          taskprerequisites.attlist, taskprerequisites.info, blocks+
        }
    }
    [ db:refname [ "taskrelated" ] db:refpurpose [ ] ]
    div {
      local.taskrelated.attributes = empty
      taskrelated.role.attribute = attribute role { text }
      taskrelated.attlist =
        taskrelated.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.taskrelated.attributes
      taskrelated.info = docbook.info.titleonly
      db.taskrelated =
        element db:taskrelated {
          taskrelated.attlist, taskrelated.info, blocks+
        }
    }
    ctrl:other-attribute [
      name = "area.units.attrib"
      enum-name = "area.units-enum.attribute"
      other-name = "area.units-other.attributes"
    ]
    area.units-enum.attribute =
      attribute units {
        "calspair" | "linecolumn" | "linecolumnpair" | "linerange"
      }?
    area.units-other.attributes =
      attribute units { "other" }?,
      attribute otherunits { xsd:NMTOKEN }
    area.units.attrib =
      area.units-enum.attribute | area.units-other.attributes
    [
      db:refname [ "calloutlist" ]
      db:refpurpose [
        "A list of "
        db:xmltag [ "callout" ]
        "\x{a}" ~
        "\x{a}" ~
        "\x{a}" ~
        "s"
      ]
    ]
    div {
      local.calloutlist.attributes = empty
      calloutlist.role.attribute = attribute role { text }
      calloutlist.attlist =
        calloutlist.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.calloutlist.attributes
      calloutlist.info = docbook.info.titleonly
      db.calloutlist =
        element db:calloutlist {
          calloutlist.attlist, calloutlist.info, blocks*, db.callout+
        }
    }
    [ db:refname [ "callout" ] db:refpurpose [ ] ]
    div {
      local.callout.attributes = empty
      callout.role.attribute = attribute role { text }
      callout.attlist =
        callout.role.attribute?
        & common.attributes
        & attribute arearefs { xsd:IDREFS }
        & local.callout.attributes
      db.callout = element db:callout { callout.attlist, blocks+ }
    }
    [ db:refname [ "programlistingco" ] db:refpurpose [ ] ]
    div {
      local.programlistingco.attributes = empty
      programlistingco.role.attribute = attribute role { text }
      programlistingco.attlist =
        programlistingco.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.programlistingco.attributes
      programlistingco.info = docbook.info.titleforbidden
      db.programlistingco =
        element db:programlistingco {
          programlistingco.attlist,
          programlistingco.info,
          db.areaspec,
          db.programlisting,
          db.calloutlist*
        }
    }
    [ db:refname [ "areaspec" ] db:refpurpose [ ] ]
    div {
      local.areaspec.attributes = empty
      areaspec.role.attribute = attribute role { text }
      areaspec.attlist =
        areaspec.role.attribute?
        & common.attributes
        & common.linking.attributes
        & area.units.attrib
        & local.areaspec.attributes
      db.areaspec =
        element db:areaspec {
          areaspec.attlist, (db.area | db.areaset)+
        }
    }
    [ db:refname [ "area" ] db:refpurpose [ ] ]
    div {
      local.area.attributes = empty
      area.role.attribute = attribute role { text }
      area.attlist =
        area.role.attribute?
        & common.attributes.idreq
        & area.units.attrib
        & attribute linkends { xsd:IDREFS }?
        & attribute label { text }?
        & attribute coords { text }
        & local.area.attributes
      db.area = element db:area { area.attlist, empty }
    }
    [ db:refname [ "areaset" ] db:refpurpose [ ] ]
    div {
      local.areaset.attributes = empty
      areaset.role.attribute = attribute role { text }
      areaset.attlist =
        areaset.role.attribute?
        & common.attributes.idreq
        & area.units.attrib
        & attribute label { text }?
        & local.areaset.attributes
      db.areaset = element db:areaset { areaset.attlist, db.area+ }
    }
    [ db:refname [ "screenco" ] db:refpurpose [ ] ]
    div {
      local.screenco.attributes = empty
      screenco.role.attribute = attribute role { text }
      screenco.attlist =
        screenco.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.screenco.attributes
      screenco.info = docbook.info.titleforbidden
      db.screenco =
        element db:screenco {
          screenco.attlist,
          screenco.info,
          db.areaspec,
          db.screen,
          db.calloutlist*
        }
    }
    [ db:refname [ "mediaobjectco" ] db:refpurpose [ ] ]
    div {
      local.mediaobjectco.attributes = empty
      mediaobjectco.role.attribute = attribute role { text }
      mediaobjectco.attlist =
        mediaobjectco.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.mediaobjectco.attributes
      mediaobjectco.info = docbook.info.titleforbidden
      db.mediaobjectco =
        element db:mediaobjectco {
          mediaobjectco.attlist,
          mediaobjectco.info,
          db.imageobjectco,
          (db.imageobjectco | db.textobject)*
        }
    }
    [ db:refname [ "imageobjectco" ] db:refpurpose [ ] ]
    div {
      local.imageobjectco.attributes = empty
      imageobjectco.role.attribute = attribute role { text }
      imageobjectco.attlist =
        imageobjectco.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.imageobjectco.attributes
      imageobjectco.info = docbook.info.titleforbidden
      db.imageobjectco =
        element db:imageobjectco {
          imageobjectco.attlist,
          imageobjectco.info?,
          db.areaspec,
          db.imageobject,
          db.calloutlist*
        }
    }
    [ db:refname [ "co" ] db:refpurpose [ ] ]
    div {
      local.co.attributes = empty
      co.role.attribute = attribute role { text }
      co.attlist =
        co.role.attribute?
        & common.attributes.idreq
        & attribute linkends { xsd:IDREFS }?
        & attribute label { text }?
        & local.co.attributes
      db.co = element db:co { co.attlist, empty }
    }
    [ db:refname [ "coref" ] db:refpurpose [ ] ]
    div {
      local.coref.attributes = empty
      coref.role.attribute = attribute role { text }
      coref.attlist =
        coref.role.attribute?
        & common.attributes
        & attribute linkend { xsd:IDREF }
        & attribute label { text }?
        & local.coref.attributes
      db.coref = element db:coref { coref.attlist, empty }
    }
    [ db:refname [ "productionset" ] db:refpurpose [ ] ]
    div {
      local.productionset.attributes = empty
      productionset.role.attribute = attribute role { text }
      productionset.attlist =
        productionset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.productionset.attributes
      productionset.info = docbook.info.titleonly
      db.productionset =
        element db:productionset {
          productionset.attlist,
          productionset.info,
          (db.production | db.productionrecap)+
        }
    }
    [ db:refname [ "production" ] db:refpurpose [ ] ]
    div {
      local.production.attributes = empty
      production.role.attribute = attribute role { text }
      production.attlist =
        production.role.attribute?
        & common.attributes.idreq
        & common.linking.attributes
        & local.production.attributes
      db.production =
        element db:production {
          production.attlist, db.lhs, db.rhs, db.constraint*
        }
    }
    [ db:refname [ "lhs" ] db:refpurpose [ ] ]
    div {
      local.lhs.attributes = empty
      lhs.role.attribute = attribute role { text }
      lhs.attlist =
        lhs.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.lhs.attributes
      db.lhs = element db:lhs { lhs.attlist, text }
    }
    [ db:refname [ "rhs" ] db:refpurpose [ ] ]
    div {
      local.rhs.attributes = empty
      rhs.role.attribute = attribute role { text }
      rhs.attlist =
        rhs.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.rhs.attributes
      db.rhs =
        element db:rhs {
          rhs.attlist,
          (text | db.nonterminal | db.lineannotation | db.sbr)*
        }
    }
    [ db:refname [ "nonterminal" ] db:refpurpose [ ] ]
    div {
      local.nonterminal.attributes = empty
      nonterminal.role.attribute = attribute role { text }
      nonterminal.attlist =
        nonterminal.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute def { text }
        & local.nonterminal.attributes
      db.nonterminal =
        element db:nonterminal { nonterminal.attlist, text }
    }
    [ db:refname [ "constraint" ] db:refpurpose [ ] ]
    div {
      local.constraint.attributes = empty
      constraint.role.attribute = attribute role { text }
      constraint.attlist =
        constraint.role.attribute?
        & common.attributes
        & common.linking.attributes.req
        & local.constraint.attributes
      db.constraint =
        element db:constraint { constraint.attlist, empty }
    }
    [ db:refname [ "productionrecap" ] db:refpurpose [ ] ]
    div {
      local.productionrecap.attributes = empty
      productionrecap.role.attribute = attribute role { text }
      productionrecap.attlist =
        productionrecap.role.attribute?
        & common.attributes
        & common.linking.attributes.req
        & local.productionrecap.attributes
      db.productionrecap =
        element db:productionrecap { productionrecap.attlist, empty }
    }
    [ db:refname [ "constraintdef" ] db:refpurpose [ ] ]
    div {
      local.constraintdef.attributes = empty
      constraintdef.role.attribute = attribute role { text }
      constraintdef.attlist =
        constraintdef.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.constraintdef.attributes
      constraintdef.info = docbook.info.titleonly
      db.constraintdef =
        element db:constraintdef {
          constraintdef.attlist, constraintdef.info, blocks+
        }
    }
    char.attribute = attribute char { text }
    charoff.attribute = attribute charoff { text }
    colsep.attribute = attribute colsep { text }
    rowsep.attribute = attribute rowsep { text }
    align.attribute =
      attribute align {
        "center" | "char" | "justify" | "left" | "right"
      }
    valign.attribute = attribute valign { "bottom" | "middle" | "top" }
    spanname.attribute = attribute spanname { text }
    colname.attribute = attribute colname { text }
    [ db:refname [ "tgroup" ] db:refpurpose [ ] ]
    div {
      local.tgroup.attributes = empty
      tgroup.role.attribute = attribute role { text }
      tgroup.attlist =
        tgroup.role.attribute?
        & common.attributes
        & common.linking.attributes
        & char.attribute?
        & charoff.attribute?
        & attribute tgroupstyle { text }?
        & attribute cols { xsd:integer }
        & colsep.attribute?
        & rowsep.attribute?
        & align.attribute?
        & local.tgroup.attributes
      db.tgroup =
        element db:tgroup {
          tgroup.attlist,
          db.colspec*,
          db.spanspec*,
          cals.thead?,
          cals.tfoot?,
          cals.tbody
        }
    }
    [ db:refname [ "colspec" ] db:refpurpose [ ] ]
    div {
      local.colspec.attributes = empty
      colspec.role.attribute = attribute role { text }
      colspec.attlist =
        colspec.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute colnum { xsd:integer }?
        & char.attribute?
        & colsep.attribute?
        & attribute colwidth { text }?
        & charoff.attribute?
        & colname.attribute?
        & rowsep.attribute?
        & align.attribute?
        & local.colspec.attributes
      db.colspec = element db:colspec { colspec.attlist, empty }
    }
    [ db:refname [ "spanspec" ] db:refpurpose [ ] ]
    div {
      local.spanspec.attributes = empty
      spanspec.role.attribute = attribute role { text }
      spanspec.attlist =
        spanspec.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute namest { text }
        & attribute nameend { text }
        & spanname.attribute
        & char.attribute?
        & colsep.attribute?
        & charoff.attribute?
        & rowsep.attribute?
        & align.attribute?
        & local.spanspec.attributes
      db.spanspec = element db:spanspec { spanspec.attlist, empty }
    }
    [ db:refname [ "thead" ] db:refpurpose [ ] ]
    div {
      local.cals.thead.attributes = empty
      cals.thead.role.attribute = attribute role { text }
      cals.thead.attlist =
        cals.thead.role.attribute?
        & common.attributes
        & common.linking.attributes
        & valign.attribute?
        & local.cals.thead.attributes
      cals.thead =
        element db:thead { cals.thead.attlist, db.colspec*, db.row+ }
    }
    [ db:refname [ "tfoot" ] db:refpurpose [ ] ]
    div {
      local.cals.tfoot.attributes = empty
      cals.tfoot.role.attribute = attribute role { text }
      cals.tfoot.attlist =
        cals.tfoot.role.attribute?
        & common.attributes
        & common.linking.attributes
        & valign.attribute?
        & local.cals.tfoot.attributes
      cals.tfoot =
        element db:tfoot { cals.tfoot.attlist, db.colspec*, db.row+ }
    }
    [ db:refname [ "tbody" ] db:refpurpose [ ] ]
    div {
      local.cals.tbody.attributes = empty
      cals.tbody.role.attribute = attribute role { text }
      cals.tbody.attlist =
        cals.tbody.role.attribute?
        & common.attributes
        & common.linking.attributes
        & valign.attribute?
        & local.cals.tbody.attributes
      cals.tbody = element db:tbody { cals.tbody.attlist, db.row+ }
    }
    [ db:refname [ "row" ] db:refpurpose [ ] ]
    div {
      local.row.attributes = empty
      row.role.attribute = attribute role { text }
      row.attlist =
        row.role.attribute?
        & common.attributes
        & common.linking.attributes
        & rowsep.attribute?
        & valign.attribute?
        & local.row.attributes
      db.row = element db:row { row.attlist, (db.entry | db.entrytbl)+ }
    }
    [ db:refname [ "entry" ] db:refpurpose [ ] ]
    div {
      local.entry.attributes = empty
      entry.role.attribute = attribute role { text }
      entry.attlist =
        entry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute nameend { text }?
        & valign.attribute?
        & char.attribute?
        & colsep.attribute?
        & charoff.attribute?
        & attribute morerows { xsd:integer }?
        & attribute spanname { text }?
        & attribute namest { text }?
        & colname.attribute?
        & rowsep.attribute?
        & attribute rotate { text }?
        & align.attribute?
        & local.entry.attributes
      db.entry =
        element db:entry { entry.attlist, (inlines* | blocks*) }
    }
    [ db:refname [ "entrytbl" ] db:refpurpose [ ] ]
    div {
      local.entrytbl.attributes = empty
      entrytbl.role.attribute = attribute role { text }
      entrytbl.attlist =
        entrytbl.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute nameend { text }?
        & char.attribute?
        & charoff.attribute?
        & attribute spanname { text }?
        & attribute namest { text }?
        & attribute tgroupstyle { text }?
        & attribute cols { xsd:integer }?
        & colsep.attribute?
        & rowsep.attribute?
        & colname.attribute?
        & align.attribute?
        & local.entrytbl.attributes
      db.entrytbl =
        element db:entrytbl {
          entrytbl.attlist,
          db.colspec*,
          db.spanspec*,
          cals.thead?,
          cals.tbody
        }
    }
    [ db:refname [ "table" ] db:refpurpose [ ] ]
    div {
      local.cals.table.attributes = empty
      cals.table.role.attribute = attribute role { text }
      cals.table.attlist =
        cals.table.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute tabstyle { text }?
        & attribute orient { "land" | "port" }?
        & colsep.attribute?
        & rowsep.attribute?
        & attribute frame {
            "all" | "bottom" | "none" | "sides" | "top" | "topbot"
          }?
        & attribute pgwide { "0" | "1" }?
        & local.cals.table.attributes
      cals.table.info = docbook.info.titleonlyreq
      cals.table =
        element db:table {
          cals.table.attlist,
          cals.table.info,
          indexing.inlines*,
          db.textobject*,
          (db.mediaobject+ | db.tgroup+)
        }
    }
    [ db:refname [ "informaltable" ] db:refpurpose [ ] ]
    div {
      local.cals.informaltable.attributes = empty
      cals.informaltable.role.attribute = attribute role { text }
      cals.informaltable.attlist =
        cals.informaltable.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute tabstyle { text }?
        & attribute orient { "land" | "port" }?
        & colsep.attribute?
        & rowsep.attribute?
        & attribute frame {
            "all" | "bottom" | "none" | "sides" | "top" | "topbot"
          }?
        & attribute pgwide { "0" | "1" }?
        & local.cals.informaltable.attributes
      cals.informaltable.info = docbook.info.titleforbidden
      cals.informaltable =
        element db:informaltable {
          cals.informaltable.attlist,
          cals.informaltable.info,
          indexing.inlines*,
          db.textobject*,
          (db.mediaobject+ | db.tgroup+)
        }
    }
    html.coreattrs &=
      attribute class { text }?,
      attribute style { text }?,
      attribute title { text }?
    html.i18n &=
      attribute lang { text }?,
      attribute dir { "ltr" | "rtl" }?
    html.events &=
      attribute onclick { text }?,
      attribute ondblclick { text }?,
      attribute onmousedown { text }?,
      attribute onmouseup { text }?,
      attribute onmouseover { text }?,
      attribute onmousemove { text }?,
      attribute onmouseout { text }?,
      attribute onkeypress { text }?,
      attribute onkeydown { text }?,
      attribute onkeyup { text }?
    html.attrs &= html.coreattrs, html.i18n, html.events
    html.cellhalign &=
      attribute align {
        "left" | "center" | "right" | "justify" | "char"
      }?,
      attribute char { text }?,
      attribute charoff { text }?
    html.cellvalign &=
      attribute valign { "top" | "middle" | "bottom" | "baseline" }?
    html.table.model =
      html.caption,
      (html.col* | html.colgroup*),
      html.thead?,
      html.tfoot?,
      (html.tbody+ | html.tr+)
    html.informaltable.model =
      (html.col* | html.colgroup*),
      html.thead?,
      html.tfoot?,
      (html.tbody+ | html.tr+)
    [ db:refname [ "table" ] db:refpurpose [ ] ]
    div {
      local.html.table.attributes = empty
      html.table.attlist =
        html.attrs
        & attribute summary { text }?
        & attribute width { text }?
        & attribute border { text }?
        & attribute frame {
            "void"
            | "above"
            | "below"
            | "hsides"
            | "lhs"
            | "rhs"
            | "vsides"
            | "box"
            | "border"
          }?
        & attribute rules {
            "none" | "groups" | "rows" | "cols" | "all"
          }?
        & attribute cellspacing { text }?
        & attribute cellpadding { text }?
        & local.html.table.attributes
      html.table =
        element db:table { html.table.attlist, html.table.model }
    }
    [ db:refname [ "informaltable" ] db:refpurpose [ ] ]
    div {
      local.html.informaltable.attributes = empty
      html.informaltable.attlist =
        html.attrs
        & attribute summary { text }?
        & attribute width { text }?
        & attribute border { text }?
        & attribute frame {
            "void"
            | "above"
            | "below"
            | "hsides"
            | "lhs"
            | "rhs"
            | "vsides"
            | "box"
            | "border"
          }?
        & attribute rules {
            "none" | "groups" | "rows" | "cols" | "all"
          }?
        & attribute cellspacing { text }?
        & attribute cellpadding { text }?
        & local.html.informaltable.attributes
      html.informaltable =
        element db:informaltable {
          html.informaltable.attlist, html.informaltable.model
        }
    }
    [ db:refname [ "caption" ] db:refpurpose [ ] ]
    div {
      local.caption.attributes = empty
      html.caption.attlist = html.attrs & local.caption.attributes
      html.caption = element db:caption { html.caption.attlist, text }
    }
    [ db:refname [ "col" ] db:refpurpose [ ] ]
    div {
      local.col.attributes = empty
      html.col.attlist =
        html.attrs
        & attribute span { text }?
        & attribute width { text }?
        & html.cellhalign
        & html.cellvalign
        & local.col.attributes
      html.col = element db:col { html.col.attlist, empty }
    }
    [ db:refname [ "colgroup" ] db:refpurpose [ ] ]
    div {
      local.colgroup.attributes = empty
      html.colgroup.attlist =
        html.attrs
        & attribute span { text }?
        & attribute width { text }?
        & html.cellhalign
        & html.cellvalign
        & local.colgroup.attributes
      html.colgroup =
        element db:colgroup { html.colgroup.attlist, html.col* }
    }
    [ db:refname [ "thead" ] db:refpurpose [ ] ]
    div {
      local.html.thead.attributes = empty
      html.thead.attlist =
        html.attrs
        & html.cellhalign
        & html.cellvalign
        & local.html.thead.attributes
      html.thead = element db:thead { html.thead.attlist, html.tr+ }
    }
    [ db:refname [ "tfoot" ] db:refpurpose [ ] ]
    div {
      local.html.tfoot.attributes = empty
      html.tfoot.attlist =
        html.attrs
        & html.cellhalign
        & html.cellvalign
        & local.html.tfoot.attributes
      html.tfoot = element db:tfoot { html.tfoot.attlist, html.tr+ }
    }
    [ db:refname [ "tbody" ] db:refpurpose [ ] ]
    div {
      local.html.tbody.attributes = empty
      html.tbody.attlist =
        html.attrs
        & html.cellhalign
        & html.cellvalign
        & local.html.tbody.attributes
      html.tbody = element db:tbody { html.tbody.attlist, html.tr+ }
    }
    [ db:refname [ "tr" ] db:refpurpose [ ] ]
    div {
      local.tr.attributes = empty
      html.tr.attlist =
        html.attrs
        & html.cellhalign
        & html.cellvalign
        & local.tr.attributes
      html.tr = element db:tr { html.tr.attlist, (html.th | html.td)+ }
    }
    [ db:refname [ "th" ] db:refpurpose [ ] ]
    div {
      local.th.attributes = empty
      html.th.attlist =
        html.attrs
        & attribute abbr { text }?
        & attribute axis { text }?
        & attribute headers { text }?
        & attribute scope { text }?
        & attribute rowspan { text }?
        & attribute colspan { text }?
        & html.cellhalign
        & html.cellvalign
        & local.th.attributes
      html.th = element db:th { html.th.attlist, (inlines* | blocks*) }
    }
    [ db:refname [ "td" ] db:refpurpose [ ] ]
    div {
      local.td.attributes = empty
      html.td.attlist =
        html.attrs
        & attribute abbr { text }?
        & attribute axis { text }?
        & attribute headers { text }?
        & attribute scope { text }?
        & attribute rowspan { text }?
        & attribute colspan { text }?
        & html.cellhalign
        & html.cellvalign
        & local.td.attributes
      html.td = element db:td { html.td.attlist, (inlines* | blocks*) }
    }
    [ db:refname [ "msgset" ] db:refpurpose [ ] ]
    div {
      local.msgset.attributes = empty
      msgset.role.attribute = attribute role { text }
      msgset.attlist =
        msgset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgset.attributes
      msgset.info = docbook.info.titleonly
      db.msgset =
        element db:msgset {
          msgset.attlist,
          msgset.info,
          (db.msgentry+ | db.simplemsgentry+)
        }
    }
    [ db:refname [ "msgentry" ] db:refpurpose [ ] ]
    div {
      local.msgentry.attributes = empty
      msgentry.role.attribute = attribute role { text }
      msgentry.attlist =
        msgentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgentry.attributes
      db.msgentry =
        element db:msgentry {
          msgentry.attlist, db.msg+, db.msginfo?, db.msgexplan*
        }
    }
    [ db:refname [ "simplemsgentry" ] db:refpurpose [ ] ]
    div {
      local.simplemsgentry.attributes = empty
      simplemsgentry.role.attribute = attribute role { text }
      simplemsgentry.attlist =
        simplemsgentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute audience { text }
        & attribute origin { text }
        & attribute level { text }
        & local.simplemsgentry.attributes
      db.simplemsgentry =
        element db:simplemsgentry {
          simplemsgentry.attlist, db.msgtext, db.msgexplan+
        }
    }
    [ db:refname [ "msg" ] db:refpurpose [ ] ]
    div {
      local.msg.attributes = empty
      msg.role.attribute = attribute role { text }
      msg.attlist =
        msg.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msg.attributes
      msg.info = docbook.info.titleonly
      db.msg =
        element db:msg {
          msg.attlist, msg.info, db.msgmain, (db.msgsub | db.msgrel)*
        }
    }
    [ db:refname [ "msgmain" ] db:refpurpose [ ] ]
    div {
      local.msgmain.attributes = empty
      msgmain.role.attribute = attribute role { text }
      msgmain.attlist =
        msgmain.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgmain.attributes
      msgmain.info = docbook.info.titleonly
      db.msgmain =
        element db:msgmain { msgmain.attlist, msgmain.info, db.msgtext }
    }
    [ db:refname [ "msgsub" ] db:refpurpose [ ] ]
    div {
      local.msgsub.attributes = empty
      msgsub.role.attribute = attribute role { text }
      msgsub.attlist =
        msgsub.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgsub.attributes
      msgsub.info = docbook.info.titleonly
      db.msgsub =
        element db:msgsub { msgsub.attlist, msgsub.info, db.msgtext }
    }
    [ db:refname [ "msgrel" ] db:refpurpose [ ] ]
    div {
      local.msgrel.attributes = empty
      msgrel.role.attribute = attribute role { text }
      msgrel.attlist =
        msgrel.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgrel.attributes
      msgrel.info = docbook.info.titleonly
      db.msgrel =
        element db:msgrel { msgrel.attlist, msgrel.info, db.msgtext }
    }
    [ db:refname [ "msgtext" ] db:refpurpose [ ] ]
    div {
      local.msgtext.attributes = empty
      msgtext.role.attribute = attribute role { text }
      msgtext.attlist =
        msgtext.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgtext.attributes
      db.msgtext = element db:msgtext { msgtext.attlist, blocks+ }
    }
    [ db:refname [ "msginfo" ] db:refpurpose [ ] ]
    div {
      local.msginfo.attributes = empty
      msginfo.role.attribute = attribute role { text }
      msginfo.attlist =
        msginfo.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msginfo.attributes
      db.msginfo =
        element db:msginfo {
          msginfo.attlist, (db.msglevel | db.msgorig | db.msgaud)*
        }
    }
    [ db:refname [ "msglevel" ] db:refpurpose [ ] ]
    div {
      local.msglevel.attributes = empty
      msglevel.role.attribute = attribute role { text }
      msglevel.attlist =
        msglevel.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msglevel.attributes
      db.msglevel =
        element db:msglevel { msglevel.attlist, docbook.text }
    }
    [ db:refname [ "msgorig" ] db:refpurpose [ ] ]
    div {
      local.msgorig.attributes = empty
      msgorig.role.attribute = attribute role { text }
      msgorig.attlist =
        msgorig.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgorig.attributes
      db.msgorig = element db:msgorig { msgorig.attlist, docbook.text }
    }
    [ db:refname [ "msgaud" ] db:refpurpose [ ] ]
    div {
      local.msgaud.attributes = empty
      msgaud.role.attribute = attribute role { text }
      msgaud.attlist =
        msgaud.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgaud.attributes
      db.msgaud = element db:msgaud { msgaud.attlist, docbook.text }
    }
    [ db:refname [ "msgexplan" ] db:refpurpose [ ] ]
    div {
      local.msgexplan.attributes = empty
      msgexplan.role.attribute = attribute role { text }
      msgexplan.attlist =
        msgexplan.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.msgexplan.attributes
      msgexplan.info = docbook.info.titleonly
      db.msgexplan =
        element db:msgexplan {
          msgexplan.attlist, msgexplan.info, blocks+
        }
    }
    [ db:refname [ "qandaset" ] db:refpurpose [ ] ]
    div {
      local.qandaset.attributes = empty
      qandaset.role.attribute = attribute role { text }
      qandaset.attlist =
        qandaset.role.attribute?
        & common.attributes
        & common.linking.attributes
        & attribute defaultlabel { "none" | "number" | "qanda" }?
        & local.qandaset.attributes
      qandaset.info = docbook.info.titleonly
      db.qandaset =
        element db:qandaset {
          qandaset.attlist,
          qandaset.info,
          blocks*,
          (db.qandadiv+ | db.qandaentry+)
        }
    }
    [ db:refname [ "qandadiv" ] db:refpurpose [ ] ]
    div {
      local.qandadiv.attributes = empty
      qandadiv.role.attribute = attribute role { text }
      qandadiv.attlist =
        qandadiv.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.qandadiv.attributes
      qandadiv.info = docbook.info.titleonly
      db.qandadiv =
        element db:qandadiv {
          qandadiv.attlist,
          qandadiv.info,
          blocks*,
          (db.qandadiv+ | db.qandaentry+)
        }
    }
    [ db:refname [ "qandaentry" ] db:refpurpose [ ] ]
    div {
      local.qandaentry.attributes = empty
      qandaentry.role.attribute = attribute role { text }
      qandaentry.attlist =
        qandaentry.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.qandaentry.attributes
      qandaentry.info = docbook.info.titleforbidden
      db.qandaentry =
        element db:qandaentry {
          qandaentry.attlist, qandaentry.info, db.question, db.answer*
        }
    }
    [ db:refname [ "question" ] db:refpurpose [ ] ]
    div {
      local.question.attributes = empty
      question.role.attribute = attribute role { text }
      question.attlist =
        question.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.question.attributes
      db.question =
        element db:question { question.attlist, db.label?, blocks+ }
    }
    [ db:refname [ "answer" ] db:refpurpose [ ] ]
    div {
      local.answer.attributes = empty
      answer.role.attribute = attribute role { text }
      answer.attlist =
        answer.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.answer.attributes
      db.answer =
        element db:answer { answer.attlist, db.label?, blocks+ }
    }
    [ db:refname [ "label" ] db:refpurpose [ ] ]
    div {
      local.label.attributes = empty
      label.role.attribute = attribute role { text }
      label.attlist =
        label.role.attribute?
        & common.attributes
        & common.linking.attributes
        & local.label.attributes
      db.label = element db:label { label.attlist, docbook.text }
    }
    any.mml = element ns1:* { anyAttribute*, (text | any.mml)* }
    any.svg = element ns2:* { anyAttribute*, (text | any.svg)* }
  }
}
